/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,25],$V2=[1,39],$V3=[1,30],$V4=[1,26],$V5=[1,34],$V6=[1,35],$V7=[1,36],$V8=[1,37],$V9=[1,29],$Va=[1,31],$Vb=[1,38],$Vc=[1,32],$Vd=[1,33],$Ve=[1,41],$Vf=[1,42],$Vg=[1,43],$Vh=[1,44],$Vi=[1,45],$Vj=[1,40],$Vk=[5,27,28,29,42,44,46,50,53,59,60,63,64,65,67,68,73,74,75,76,77,96],$Vl=[1,66],$Vm=[1,68],$Vn=[37,49],$Vo=[2,71],$Vp=[1,70],$Vq=[1,71],$Vr=[1,103],$Vs=[1,85],$Vt=[1,86],$Vu=[1,87],$Vv=[1,99],$Vw=[1,100],$Vx=[1,102],$Vy=[1,104],$Vz=[1,105],$VA=[1,101],$VB=[1,98],$VC=[1,84],$VD=[1,88],$VE=[1,106],$VF=[1,107],$VG=[1,108],$VH=[1,109],$VI=[1,110],$VJ=[1,111],$VK=[1,112],$VL=[31,40,42,44,49],$VM=[5,9,27,28,29,42,44,46,50,52,53,59,60,63,64,65,66,67,68,73,74,75,76,77,96],$VN=[9,37,49],$VO=[9,31],$VP=[1,142],$VQ=[1,141],$VR=[1,143],$VS=[1,144],$VT=[1,145],$VU=[1,146],$VV=[1,147],$VW=[1,148],$VX=[1,149],$VY=[1,150],$VZ=[1,151],$V_=[1,152],$V$=[1,153],$V01=[1,154],$V11=[9,31,34,41,46,49,97,98,99,100,101,102,103,104,105,106,107,108,109,110],$V21=[2,135],$V31=[1,159],$V41=[1,156],$V51=[1,157],$V61=[1,158],$V71=[1,189],$V81=[31,46,49],$V91=[1,201],$Va1=[9,31,34,41,46,49,97,98,99,100,101,102],$Vb1=[9,31,34,41,46,49,97,98,102],$Vc1=[9,31,34,41,46,49,97,98,99,100,102],$Vd1=[9,31,34,41,46,49,97,98,99,100,101,102,103,104,105,106,107,108,110],$Ve1=[9,31,34,41,46,49,97,98,99,100,101,102,104,105,106,107,108],$Vf1=[9,31,34,41,46,49,97,98,99,100,101,102,106,107,108],$Vg1=[31,49];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"BLOQUE":7,"DECLARACION":8,"punto_c":9,"ASIGNACION":10,"INCREDECRE":11,"PRINT":12,"ARRAY":13,"MATRIZ":14,"Asignar_arr":15,"IF":16,"SEGUN":17,"MIENTRAS":18,"PARA":19,"DOWHILE":20,"DOUNTIL":21,"OP_TERNARIO":22,"FUNCION":23,"LLAMADA":24,"ARRAY_PQ":25,"RUN":26,"pr_continue":27,"pr_break":28,"par_abre":29,"expresion":30,"par_cierra":31,"interrogacion_cierra":32,"OP_TERNARIO_ST":33,"dos_puntos":34,"TIPOS":35,"LISTAIDS":36,"igual":37,"TIPO_VALOR":38,"CASTEO":39,"cor_abre":40,"cor_cierra":41,"identificador":42,"pr_new":43,"llave_abre":44,"PARAMETROS_LLAMADA":45,"llave_cierra":46,"Llenar_mat":47,"LLenar_mat":48,"coma":49,"pr_si":50,"ELSE_ST":51,"pr_contrario":52,"pr_segun":53,"Cases":54,"CASE":55,"pr_case":56,"DEFAULT":57,"pr_default":58,"pr_while":59,"pr_for":60,"DECLARACION_PARA":61,"ITERADOR":62,"++":63,"--":64,"pr_do":65,"pr_until":66,"pr_imprimir":67,"pr_imprimir_ln":68,"PARAMETROS":69,"pr_void":70,"RETORNO":71,"pr_retorno":72,"pr_int":73,"pr_string":74,"pr_double":75,"pr_char":76,"pr_boolean":77,"TOLOWER":78,"pr_minuscula":79,"TOUPPER":80,"pr_mayuscula":81,"ROUND":82,"pr_redondear":83,"LENGTH":84,"pr_longi":85,"TYPEOF":86,"pr_tipo":87,"TOSTRING":88,"pr_a_cadena":89,"TOCHAR":90,"pr_arreglo":91,"punto":92,"pr_push":93,"Expresion":94,"pr_pop":95,"pr_run":96,"-":97,"+":98,"*":99,"/":100,"%":101,"^":102,"<":103,"<=":104,">":105,">=":106,"==":107,"!=":108,"&&":109,"||":110,"!":111,"tip":112,"PARSEO":113,"entero":114,"decimal":115,"cadena":116,"caracter":117,"pr_true":118,"pr_false":119,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"punto_c",27:"pr_continue",28:"pr_break",29:"par_abre",31:"par_cierra",32:"interrogacion_cierra",34:"dos_puntos",37:"igual",38:"TIPO_VALOR",40:"cor_abre",41:"cor_cierra",42:"identificador",43:"pr_new",44:"llave_abre",46:"llave_cierra",47:"Llenar_mat",49:"coma",50:"pr_si",52:"pr_contrario",53:"pr_segun",56:"pr_case",58:"pr_default",59:"pr_while",60:"pr_for",63:"++",64:"--",65:"pr_do",66:"pr_until",67:"pr_imprimir",68:"pr_imprimir_ln",70:"pr_void",72:"pr_retorno",73:"pr_int",74:"pr_string",75:"pr_double",76:"pr_char",77:"pr_boolean",79:"pr_minuscula",81:"pr_mayuscula",83:"pr_redondear",85:"pr_longi",87:"pr_tipo",89:"pr_a_cadena",91:"pr_arreglo",92:"punto",93:"pr_push",94:"Expresion",95:"pr_pop",96:"pr_run",97:"-",98:"+",99:"*",100:"/",101:"%",102:"^",103:"<",104:"<=",105:">",106:">=",107:"==",108:"!=",109:"&&",110:"||",111:"!",113:"PARSEO",114:"entero",115:"decimal",116:"cadena",117:"caracter",118:"pr_true",119:"pr_false"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[22,7],[33,1],[8,4],[8,7],[8,2],[10,3],[39,7],[13,10],[13,10],[14,15],[14,12],[48,5],[48,3],[15,6],[16,6],[51,2],[51,2],[51,0],[17,7],[54,1],[55,5],[57,3],[18,5],[19,9],[61,1],[61,1],[62,1],[62,1],[11,2],[11,2],[11,2],[11,2],[20,6],[21,6],[12,4],[12,3],[12,4],[12,3],[23,6],[23,7],[23,6],[23,7],[71,2],[71,1],[36,3],[36,1],[69,5],[69,3],[35,1],[35,1],[35,1],[35,1],[35,1],[24,3],[24,4],[45,3],[45,1],[78,4],[80,4],[82,4],[84,4],[86,4],[88,4],[90,5],[25,6],[25,5],[26,5],[26,5],[7,3],[7,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,1],[30,3],[30,4],[112,3],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  console.log("termine de analizar"); return $$[$0-1]; 
break;
case 2:
console.log("error sintactico " +$$[$0-1])
break;
case 3:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 4:
 this.$ = [$$[$0]];            
break;
case 5: case 13: case 14: case 15: case 16: case 17: case 18: case 20:
  this.$ = $$[$0];  
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 19: case 21: case 22: case 23: case 116: case 117: case 118: case 119: case 120: case 121: case 122: case 123:
  this.$ = $$[$0-1];  
break;
case 24:
  this.$ = new Continue_( _$[$0-1].first_line, _$[$0-1].first_column);  
break;
case 25:
  this.$ = new Break_( _$[$0-1].first_line, _$[$0-1].first_column);  
break;
case 26:
 this.$=new OperadorTernario($$[$0-5], $$[$0-2], $$[$0] ,_$[$0-3].first_line, _$[$0-3].first_column ); 
break;
case 27: case 50: case 51: case 52: case 53: case 74: case 75: case 76: case 77: case 78:
 this.$=$$[$0]; 
break;
case 28:
 this.$ = new Declaracion($$[$0-2], $$[$0-3], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column ); 
break;
case 29:
 this.$ = new Declaracion($$[$0-5], $$[$0-6], $$[$0-3], _$[$0-6].first_line, _$[$0-6].first_column ); 
break;
case 30:
 this.$ = new Declaracion($$[$0], $$[$0-1], null , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 31:
 this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);  
break;
case 32:
 this.$ = new Parseo($$[$0-6], $$[$0-5], $$[$0-3] ); 
break;
case 33:
 this.$ = new Vector($$[$0-6], [],$$[$0-9] ,[],$$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column  ); 
break;
case 34:
 this.$ = new Vector($$[$0-6], $$[$0-1], $$[$0-9],[],0, _$[$0-9].first_line, _$[$0-9].first_column  ); 
break;
case 35:
 this.$ = new Matriz($$[$0-9],[], $$[$0-14],[],$$[$0-4], $$[$0-1],_$[$0-14].first_line, _$[$0-14].first_column  ); 
break;
case 36:
 this.$ = new Matriz($$[$0-6], $$[$0-1], $$[$0-11],[],0,0, _$[$0-11].first_line, _$[$0-11].first_column  ); 
break;
case 37:
  $$[$0-4].push($$[$0-2]);    this.$ = $$[$0-4];   
break;
case 38:
    this.$ = [$$[$0-2]];                 
break;
case 39:
 this.$=new Asignar_arreglo($$[$0-5], $$[$0-3]  , $$[$0],_$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 40:
 this.$ = new Si($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);  
break;
case 41: case 42:
 this.$ = $$[$0];   
break;
case 43:
 this.$ = null; 
break;
case 48:
this.$ = new Mientras($$[$0-2], $$[$01]) ;
break;
case 49:
 this.$=new Para($$[$0-6], $$[$0-4], $$[$0-2] , $$[$0], _$[$0-8].first_line, _$[$0-8].first_column );   
break;
case 54: case 57:
 this.$= new Incre($$[$0-1],$$[$0],_$[$0].first_line,_$[$0].first_column); 
break;
case 55: case 56:
 this.$= new Incre($$[$0],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 58:
  this.$ = new DoWhile($$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column);    
break;
case 59:
  this.$ = new DoUntil($$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column);    
break;
case 60:
 this.$ = new Imprimir($$[$0-1]  , _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 61:
 this.$ = new Imprimir(null, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 62:
 this.$ = new Imprimir_nl($$[$0-1]  , _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 63:
 this.$ = new Imprimir_nl(null, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 64:
 this.$ = new Funcion($$[$0-5], $$[$0], [], $$[$0-1],$$[$01], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 65:
 this.$ = new Funcion($$[$0-6], $$[$0-1], $$[$0-4], $$[$0-2], $$[$01], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 66:
 this.$ = new Funcion($$[$0-5], $$[$01], [], "void",null, _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 67:
 this.$ = new Funcion($$[$0-6], $$[$0], $$[$0-4], "void",null, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 68:
this.$ = $$[$0]
break;
case 69:
this.$ = "ret"
break;
case 70:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];  
break;
case 71:
 this.$ = [$$[$0]];             
break;
case 72:
 $$[$0-4].push($$[$0-2]+","+$$[$0]); this.$ = $$[$0-4];  
break;
case 73:
 this.$ = [$$[$0-2]+","+$$[$0]];             
break;
case 79:
 this.$ = new LLAMADA($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);  
break;
case 80:
 this.$ = new LLAMADA($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);  
break;
case 81:
    $$[$0-2].push($$[$0]);    this.$ = $$[$0-2];   
break;
case 82:
    this.$ = [$$[$0]];                 
break;
case 83:
 this.$ = new To_lower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);  
break;
case 84:
 this.$ = new To_upper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);  
break;
case 85:
 this.$ = new Redondear($$[$0-1],  _$[$0-3].first_line, _$[$0-3].first_column);  
break;
case 86:
 this.$ = new Longitud($$[$0-1],  _$[$0-3].first_line, _$[$0-3].first_column);  
break;
case 87:
 this.$ = new Tipo($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);  
break;
case 88:
 this.$ = new To_string($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);  
break;
case 89:
 this.$ = new To_arr($$[$0-2],  _$[$0-4].first_line, _$[$0-4].first_column);  
break;
case 90:
 this.$=new Arreglo_mod($$[$0-5] , $$[$0-1]  , true ,false, _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 91:
 this.$=new Arreglo_mod($$[$0-4], null, false,true , _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 92:
 this.$=new Run($$[$0-4], [], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 93:
 this.$ = new RUN($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);  
break;
case 94:
 this.$ = new Instrucciones($$[$0-1] ,$$[$0]        , _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 95:
 this.$ = new Instrucciones(new Array(),null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 96:
 this.$ = new Operacion($$[$0], $$[$0], Tipo.NEGACION,        _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 97:
 this.$ = new Incremento(Incremento_op.INCREMENTO1, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 98:
 this.$ = new Incremento(Incremento_op.INCREMENTO2, $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 99:
 this.$ = new Incremento(Incremento_op.DECREMENTO1, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 100:
 this.$ = new Incremento(Incremento_op.DECREMENTO2, $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 101:
 this.$ = new Operacion($$[$0-2], $$[$0], Tipo.MAS            , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 102:
 this.$ = new Operacion($$[$0-2], $$[$0], Tipo.MENOS          , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 103:
 this.$ = new Operacion($$[$0-2], $$[$0], Tipo.MULTIPLICACION , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 104:
 this.$ = new Operacion($$[$0-2], $$[$0], Tipo.DIV            , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 105:
 this.$ = new Operacion($$[$0-2], $$[$0], Tipo.MODULO         , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 106:
 this.$ = new Operacion($$[$0-2], $$[$0], Tipo.POT            , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 107:
 this.$ = new Relacional($$[$0-2], $$[$0], Tipo.MENOR          , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 108:
 this.$ = new Relacional($$[$0-2], $$[$0], Tipo.MENORIGUAL     , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 109:
 this.$ = new Relacional($$[$0-2], $$[$0], Tipo.MAYOR          , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 110:
 this.$ = new Relacional($$[$0-2], $$[$0], Tipo.MAYORIGUAL     , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 111:
 this.$ = new Relacional($$[$0-2], $$[$0], Tipo.IGUAL          , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 112:
 this.$ = new Relacional($$[$0-2], $$[$0], Tipo.DIFERENCIACION , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 113:
 this.$ = new Logica($$[$0-2], $$[$0],Tipo.AND  , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 114:
 this.$ = new Logica($$[$0-2], $$[$0],Tipo.OR   , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 115:
 this.$ = new Logica($$[$0], $$[$0],Tipo.NOT  , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 124:
  this.$ = $$[$0]; 
break;
case 125:
 this.$= new Acceso_arr($$[$0-2],false,false,null,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 126:
 this.$= new Acceso_arr($$[$0-3],true ,true ,$$[$0-1]  ,_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 127:
  this.$ = $$[$0-1]; 
break;
case 128:
this.$ = $$[$0];
break;
case 129:
  this.$ = new Variable($$[$0],                   Type.INT , _$[$0].first_line, _$[$0].first_column); 
break;
case 130:
  this.$ = new Variable($$[$0],                   Type.DOUBLE , _$[$0].first_line, _$[$0].first_column); 
break;
case 131:
  this.$ = new Variable($$[$0].replace(/\"/g,""), Type.STRING , _$[$0].first_line, _$[$0].first_column); 
break;
case 132:
  this.$ = new Variable($$[$0].replace(/\'/g,""), Type.CHAR , _$[$0].first_line, _$[$0].first_column); 
break;
case 133:
  this.$ = new Variable(true,                   Type.BOOLEAN, _$[$0].first_line, _$[$0].first_column); 
break;
case 134:
  this.$ = new Variable(false,                   Type.BOOLEAN, _$[$0].first_line, _$[$0].first_column); 
break;
case 135:
  this.$ = new Acceso($$[$0],_$[$0].first_line, _$[$0].first_column);  
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V0,28:$V1,29:$V2,35:27,36:28,42:$V3,44:$V4,50:$V5,53:$V6,59:$V7,60:$V8,63:$V9,64:$Va,65:$Vb,67:$Vc,68:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi,96:$Vj},{1:[3]},{5:[1,46],6:47,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V0,28:$V1,29:$V2,35:27,36:28,42:$V3,44:$V4,50:$V5,53:$V6,59:$V7,60:$V8,63:$V9,64:$Va,65:$Vb,67:$Vc,68:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi,96:$Vj},{5:[1,48]},o($Vk,[2,4]),o($Vk,[2,5]),{9:[1,49]},{9:[1,50]},{9:[1,51]},{9:[1,52]},{9:[1,53]},{9:[1,54]},{9:[1,55]},o($Vk,[2,13]),o($Vk,[2,14]),o($Vk,[2,15]),o($Vk,[2,16]),o($Vk,[2,17]),o($Vk,[2,18]),{9:[1,56]},o($Vk,[2,20]),{9:[1,57]},{9:[1,58]},{9:[1,59]},{9:[1,60]},{9:[1,61]},{4:62,6:4,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V0,28:$V1,29:$V2,35:27,36:28,42:$V3,44:$V4,46:[1,63],50:$V5,53:$V6,59:$V7,60:$V8,63:$V9,64:$Va,65:$Vb,67:$Vc,68:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi,96:$Vj},{36:64,40:[1,65],42:$Vl},{37:[1,67],49:$Vm},{42:[1,69]},o($Vn,$Vo,{29:[1,73],40:[1,72],63:$Vp,64:$Vq,92:[1,74]}),{42:[1,75]},{29:[1,76]},{29:[1,77]},{29:[1,78]},{29:[1,79]},{29:[1,80]},{29:[1,81]},{7:82,44:$V4},{22:94,29:$Vr,30:83,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{42:[1,113]},o($VL,[2,74]),o($VL,[2,75]),o($VL,[2,76]),o($VL,[2,77]),o($VL,[2,78]),{1:[2,1]},o($Vk,[2,3]),{1:[2,2]},o($Vk,[2,6]),o($Vk,[2,7]),o($Vk,[2,8]),o($Vk,[2,9]),o($Vk,[2,10]),o($Vk,[2,11]),o($Vk,[2,12]),o($Vk,[2,19]),o($Vk,[2,21]),o($Vk,[2,22]),o($Vk,[2,23]),o($Vk,[2,24]),o($Vk,[2,25]),{6:47,7:5,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V0,28:$V1,29:$V2,35:27,36:28,42:$V3,44:$V4,46:[1,114],50:$V5,53:$V6,59:$V7,60:$V8,63:$V9,64:$Va,65:$Vb,67:$Vc,68:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi,96:$Vj},o($VM,[2,95]),{9:[2,30],37:[1,115],49:$Vm},{41:[1,116]},o($VN,$Vo),{22:94,29:$Vr,30:117,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{42:[1,118]},o($VO,[2,54]),o($VO,[2,55]),o($VO,[2,56]),{22:94,29:$Vr,30:119,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:124,31:[1,120],42:[1,123],45:122,63:$Vt,64:$Vu,69:121,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{93:[1,125],95:[1,126]},o($VO,[2,57]),{22:94,29:$Vr,30:127,31:[1,128],42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:129,31:[1,130],42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:131,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:132,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:133,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{8:135,10:136,35:137,36:28,42:$Vl,61:134,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi},{59:[1,138],66:[1,139]},{31:[1,140],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{22:94,29:$Vr,30:155,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},o($V11,$V21,{40:$V31,63:$V41,64:$V51,92:$V61}),{42:[1,160]},{42:[1,161]},{22:94,29:$Vr,30:162,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{9:[1,163]},{9:[1,164]},{9:[1,165]},{9:[1,166]},{9:[1,167]},{9:[1,168]},{9:[1,169]},{9:[1,170]},o($V11,[2,124]),{29:[1,171]},{29:[1,172]},{29:[1,173]},{29:[1,174]},{29:[1,175]},{22:94,29:$Vr,30:176,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{29:[1,177]},{29:[1,178]},o($V11,[2,128]),o($V11,[2,129]),o($V11,[2,130]),o($V11,[2,131]),o($V11,[2,132]),o($V11,[2,133]),o($V11,[2,134]),{29:[1,179]},o($VM,[2,94]),{22:94,29:[1,181],30:180,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{40:[1,183],42:[1,182]},o($VO,[2,31],{97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01}),o($VN,[2,70]),{41:[1,184],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{9:[2,79],34:[1,185]},{31:[1,186],49:[1,187]},{31:[1,188],49:$V71},o([31,49,97,98,99,100,101,102,103,104,105,106,107,108,109,110],$V21,{34:[1,190],40:$V31,63:$V41,64:$V51,92:$V61}),o($V81,[2,82],{97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01}),{29:[1,191]},{29:[1,192]},{31:[1,193],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{9:[2,61]},{31:[1,194],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{9:[2,63]},{31:[1,195],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{31:[1,196],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{31:[1,197],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{9:[1,198]},{9:[2,50]},{9:[2,51]},{36:64,42:$Vl},{29:[1,199]},{29:[1,200]},{32:$V91},{22:94,29:$Vr,30:202,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:203,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:204,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:205,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:206,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:207,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:208,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:209,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:210,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:211,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:212,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:213,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:214,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:215,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},o($Va1,[2,96],{103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01}),o($V11,[2,97]),o($V11,[2,99]),{85:[1,216]},{22:94,29:$Vr,30:217,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},o($V11,[2,98]),o($V11,[2,100]),o($V11,[2,115]),o($V11,[2,116]),o($V11,[2,117]),o($V11,[2,118]),o($V11,[2,119]),o($V11,[2,120]),o($V11,[2,121]),o($V11,[2,122]),o($V11,[2,123]),{22:94,29:$Vr,30:218,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:219,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:220,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:221,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:222,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{31:[1,223],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{22:94,29:$Vr,30:224,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:225,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:124,31:[1,226],42:$Vs,45:227,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{9:[2,28],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{22:94,29:$Vr,30:176,38:[1,228],42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{37:[1,229]},{41:[1,230]},{37:[1,231]},{35:232,70:[1,233],73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi},{34:[1,234]},{42:[1,235]},{9:[2,80]},{22:94,29:$Vr,30:236,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{35:237,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi},{94:[1,238]},{31:[1,239]},{9:[2,60]},{9:[2,62]},{7:240,44:$V4},{44:[1,241]},{7:242,44:$V4},{22:94,29:$Vr,30:243,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:244,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:245,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:247,33:246,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},o([9,31,34,41,46,49,98],[2,101],{97:$VP,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01}),o($Vb1,[2,102],{99:$VR,100:$VS,101:$VT,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01}),o($Vc1,[2,103],{101:$VT,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01}),o($Vc1,[2,104],{101:$VT,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01}),o($Va1,[2,105],{103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01}),o($Vb1,[2,106],{99:$VR,100:$VS,101:$VT,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01}),o($Vd1,[2,107],{109:$V$}),o($Ve1,[2,108],{103:$VV,109:$V$,110:$V01}),o($Ve1,[2,109],{103:$VV,109:$V$,110:$V01}),o($Vf1,[2,110],{103:$VV,104:$VW,105:$VX,109:$V$,110:$V01}),o([9,31,34,41,46,49,97,98,99,100,101,102,107],[2,111],{103:$VV,104:$VW,105:$VX,106:$VY,108:$V_,109:$V$,110:$V01}),o($Vf1,[2,112],{103:$VV,104:$VW,105:$VX,109:$V$,110:$V01}),o($V11,[2,113]),o($Vd1,[2,114],{109:$V$}),o($V11,[2,125]),{41:[1,248],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{31:[1,249],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{31:[1,250],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{31:[1,251],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{31:[1,252],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{31:[1,253],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},o($V11,[2,127],{32:$V91}),{31:[1,254],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{31:[1,255],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{9:[1,256]},{31:[1,257],49:$V71},{31:[1,258]},{43:[1,259]},{42:[1,260]},{22:94,29:$Vr,30:261,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{7:262,44:$V4},{7:263,44:$V4},{35:264,70:[1,265],73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi},{34:[1,266]},o($V81,[2,81],{97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01}),o($Vg1,[2,73]),{31:[1,267]},{9:[2,91]},o($Vk,[2,43],{51:268,52:[1,269]}),{54:270,55:271,56:[1,272]},o($Vk,[2,48]),{9:[1,273],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{31:[1,274],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{31:[1,275],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{34:[1,276]},o([9,34],[2,27],{97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01}),o($V11,[2,126]),{9:[1,277]},{9:[2,83]},{9:[2,84]},{9:[2,88]},{9:[2,85]},{9:[2,86]},{9:[2,87]},{9:[2,92]},{9:[2,93]},{22:94,29:$Vr,30:278,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{35:279,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi},{37:[1,280]},{9:[2,39],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},o($Vk,[2,64]),o($Vk,[2,66]),{7:281,44:$V4},{7:282,44:$V4},{35:283,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi},{9:[2,90]},o($Vk,[2,40]),{7:284,16:285,44:$V4,50:$V5},{46:[1,286]},{46:[2,45]},{22:94,29:$Vr,30:287,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{10:289,11:290,36:28,42:[1,291],62:288,63:$V9,64:$Va},o($Vk,[2,58]),o($Vk,[2,59]),{22:94,29:$Vr,30:247,33:292,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{9:[2,89]},{9:[2,29],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{40:[1,293],44:[1,294]},{43:[1,295]},o($Vk,[2,65]),o($Vk,[2,67]),o($Vg1,[2,72]),o($Vk,[2,41]),o($Vk,[2,42]),o($Vk,[2,44]),{34:[1,296],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{31:[1,297]},{31:[2,52]},{31:[2,53]},o($Vn,$Vo,{63:$Vp,64:$Vq}),{9:[2,26]},{22:94,29:$Vr,30:298,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{22:94,29:$Vr,30:124,42:$Vs,45:299,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{35:300,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi},{7:301,44:$V4},{7:302,44:$V4},{41:[1,303],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{46:[1,304],49:$V71},{40:[1,305],44:[1,306]},{9:[1,307]},o($Vk,[2,49]),{9:[2,33]},{9:[2,34]},{22:94,29:$Vr,30:308,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{47:[1,309]},{46:[2,46]},{41:[1,310],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{46:[1,311]},{40:[1,312]},{9:[2,36]},{22:94,29:$Vr,30:313,42:$Vs,63:$Vt,64:$Vu,78:90,79:$Vv,80:91,81:$Vw,82:93,83:$Vx,84:95,85:$Vy,86:96,87:$Vz,88:92,89:$VA,90:89,91:$VB,97:$VC,111:$VD,112:97,113:$VE,114:$VF,115:$VG,116:$VH,117:$VI,118:$VJ,119:$VK},{41:[1,314],97:$VP,98:$VQ,99:$VR,100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01},{9:[2,35]}],
defaultActions: {46:[2,1],48:[2,2],128:[2,61],130:[2,63],135:[2,50],136:[2,51],188:[2,80],193:[2,60],194:[2,62],239:[2,91],250:[2,83],251:[2,84],252:[2,88],253:[2,85],254:[2,86],255:[2,87],256:[2,92],257:[2,93],267:[2,90],271:[2,45],277:[2,89],289:[2,52],290:[2,53],292:[2,26],303:[2,33],304:[2,34],307:[2,46],311:[2,36],314:[2,35]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
                let s=Union.getInstance();
                        s.add_error(new Error_det("Sintactico", `El caracter ${(this.terminals_[symbol] || symbol)} no se esperaba en esta posicion`, yyloc.last_line, yyloc.last_column+1))                  
                            
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Operacion} = require('./Operacion');
    const {Relacional} = require('./Relacional');
    const {Relational_op} = require ('./Simbolo_rel')
    const {Acceso_arr} = require('./Acceso_arr');
    const {Variable} = require('./Variable');
    const {Si} = require('./Si');
    const {Segun} = require('./Segun');
    const {Imprimir} = require('./Imprimir');
    const {Imprimir_nl} = require('./Imprimir_nl');    
    const {Instrucciones} = require('./Instrucciones');
    const {Mientras} = require('./Mientras');
    const {Declaracion} = require('./Declaracion');
    const {DoUntil} = require('./DoUntil');
    const {Asignacion} = require('./Asignacion');
    const {OperadorTernario} = require('./OperadorTernario');
    const {DoWhile} = require('./Dowhile');
    const {Para} = require('./Para');
    const {Incremento} = require('./Incremento');
    const {Funcion} = require('./Funcion');
    const {LLAMADA} = require('./LLAMADA');
    const {Break_} = require('./Break');
    const {Continue_} = require('./Continue');
    const {Run} = require('./Run');
    const {Tipo} = require('./Tipo');
    const {To_arr} = require('./To_arr');
    const {To_lower} = require('./To_lower');
    const {To_string} = require('./To_string');
    const {To_upper} = require('./To_upper');
    const {Redondear} = require('./Redondear');
    const {Parseo} = require('./Parseo');
    const {Vector} = require('./Vector');
    const {Arreglo_mod} = require('./Arreglo_mod');
    const {Acceso} = require('./Acceso');
    const {Aritmetic_s} = require('./Aritmetic_s');
    const {Incre} = require('./Incre')
    const {Incremento_op} = require('./Incremento_op')
    const {Type} = require('./Ret')
    const {Logica} = require('./Logica')
    const {Logico_op} = require('./Logico_op')
    const {Asignar_arreglo} = require('./Asignar_arreglo')
    
    const { Union}=  require("./Union")
    const { Error_det } =require("./Error_det")
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:console.log("reconoci comentario linea"); 
break;
case 2:console.log("reconoci comentario multilinea"); 
break;
case 3:console.log("reconoci pr_si "); return 50
break;
case 4:console.log("reconoci pr_contrario"); return 52
break;
case 5:console.log("reconoci pr_elif"); return 'pr_elif'
break;
case 6:console.log("reconoci pr_imprimir"); return 67
break;
case 7:console.log("reconoci pr_imprimir_ln"); return 68
break;
case 8:console.log("reconoci pr_segun"); return 53
break;
case 9:console.log("reconoci pr_case"); return 56
break;
case 10:console.log("reconoci pr_default"); return 58
break;
case 11:console.log("reconoci pr_break"); return 28
break;
case 12:console.log("reconoci pr_while"); return 59
break;
case 13:console.log("reconoci pr_for"); return 60
break;
case 14:console.log("reconoci pr_do"); return 65
break;
case 15:console.log("reconoci pr_until"); return 66
break;
case 16:console.log("reconoci pr_retorno"); return 72
break;
case 17:console.log("reconoci pr_continue"); return 27
break;
case 18:console.log("reconoci pr_minuscula"); return 79
break;
case 19:console.log("reconoci pr_mayuscula"); return 81
break;
case 20:console.log("reconoci pr_redondear"); return 83
break;
case 21:console.log("reconoci pr_void"); return 70
break;
case 22:console.log("reconoci pr_longi"); return 85
break;
case 23:console.log("reconoci pr_tipo"); return 87
break;
case 24:console.log("reconoci pr_a_cadena"); return 89
break;
case 25:console.log("reconoci pr_arreglo"); return 91
break;
case 26:console.log("reconoci pr_push"); return 93
break;
case 27:console.log("reconoci pr_pop"); return 95
break;
case 28:console.log("reconoci pr_run"); return 96
break;
case 29:console.log("reconoci pr_int"); return 73
break;
case 30:console.log("reconoci pr_double"); return 75
break;
case 31:console.log("reconoci pr_boolean"); return 77
break;
case 32:console.log("reconoci pr_char"); return 76
break;
case 33:console.log("reconoci pr_string"); return 74
break;
case 34:console.log("reconoci pr_true"); return 118
break;
case 35:console.log("reconoci pr_false"); return 119
break;
case 36:console.log("reconoci pr_new"); return 43
break;
case 37:console.log("reconoci salto_de_linea"); return 'salto_de_linea'
break;
case 38:console.log("reconoci doble_b"); return 'doble_b'
break;
case 39:console.log("reconoci com_doble"); return 'com_doble'
break;
case 40:console.log("reconoci tab"); return 'tab'
break;
case 41:console.log("reconoci simple_barra"); return 'simple_barra'
break;
case 42:console.log("reconoci  ++"); return 63
break;
case 43:console.log("reconoci  --"); return 64
break;
case 44:console.log("reconoci * "); return 99
break;
case 45:console.log("reconoci / "); return 100
break;
case 46:console.log("reconoci ^ "); return 102
break;
case 47:console.log("reconoci % "); return 101
break;
case 48:console.log("reconoci + "); return 98
break;
case 49:console.log("reconoci - "); return 97
break;
case 50:console.log("reconoci >=  "); return 106
break;
case 51:console.log("reconoci  <= ");  return 104
break;
case 52:console.log("reconoci  == ");  return 107
break;
case 53:console.log("reconoci > "); return 105
break;
case 54:console.log("reconoci < "); return 103
break;
case 55:console.log("reconoci !=  "); return 108
break;
case 56:console.log("reconoci interrogacion_cierra "); return 32
break;
case 57:console.log("reconoci igual "); return 37 
break;
case 58:console.log("reconoci || ");  return 110
break;
case 59:console.log("reconoci && ");  return 109
break;
case 60:console.log("reconoci  ! "); return 111
break;
case 61:console.log("reconoci punto_c "); return 9
break;
case 62:console.log("reconoci coma "); return 49
break;
case 63:console.log("reconoci punto "); return 92
break;
case 64:console.log("reconoci dos_puntos "); return 34
break;
case 65:console.log("reconoci llave_abre "); return 44
break;
case 66:console.log("reconoci llave_cierra "); return 46
break;
case 67:console.log("reconoci par_abre "); return 29
break;
case 68:console.log("reconoci par_cierra "); return 31
break;
case 69:console.log("reconoci cor_abre "); return 40
break;
case 70:console.log("reconoci cor_cierra "); return 41
break;
case 71:console.log("reconoci O_MAS ");	return 'O_MAS';
break;
case 72:console.log("reconoci O_MENOS ");	return 'O_MENOS';
break;
case 73:console.log("reconoci O_POR ");	return 'O_POR';
break;
case 74:console.log("reconoci O_DIVIDIDO ");	return 'O_DIVIDIDO';
break;
case 75: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);console.log("reconoci cadena "); return 116; 
break;
case 76:console.log("reconoci decimal "); return 115;
break;
case 77:console.log("reconoci entero"); return 114
break;
case 78:console.log("reconoci identificador "); return 42;
break;
case 79:console.log("reconoci caracter "); return 117
break;
case 80:return 5;
break;
case 81: 
      let lexicos= Union.getInstance()
            lexicos.add_error(new Error_det("Lexico","No se reconoce "+yy_.yytext,yy_.yylloc.first_line, yy_.yylloc.first_column));
    
    console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:void\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:run\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:\\n)/i,/^(?:\\\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:\\\\')/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:>)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:\?)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\*=)/i,/^(?:\/=)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:'[^\']*')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}