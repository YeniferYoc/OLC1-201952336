/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,32],$V1=[1,7],$V2=[1,8],$V3=[1,20],$V4=[1,36],$V5=[1,37],$V6=[1,38],$V7=[1,39],$V8=[1,40],$V9=[1,41],$Va=[1,42],$Vb=[1,52],$Vc=[1,53],$Vd=[1,54],$Ve=[1,55],$Vf=[1,56],$Vg=[1,44],$Vh=[1,45],$Vi=[1,47],$Vj=[1,48],$Vk=[1,49],$Vl=[1,46],$Vm=[1,43],$Vn=[1,50],$Vo=[1,51],$Vp=[1,33],$Vq=[2,5,11,12,24,41,48,53,59,63,64,67,76,77,78,79,80,82,83,84,85,86,87,88,93,97,98,99],$Vr=[1,87],$Vs=[1,89],$Vt=[2,68],$Vu=[46,48,50,56,75,98],$Vv=[2,5,11,12,24,41,48,52,53,58,59,63,64,67,68,76,77,78,79,80,82,83,84,85,86,87,88,93,97,98,99],$Vw=[38,40,44,75],$Vx=[1,115],$Vy=[1,120],$Vz=[1,114],$VA=[1,116],$VB=[1,117],$VC=[1,118],$VD=[1,121],$VE=[1,122],$VF=[1,123],$VG=[1,124],$VH=[1,125],$VI=[1,126],$VJ=[9,40],$VK=[1,162],$VL=[1,161],$VM=[1,163],$VN=[1,164],$VO=[1,165],$VP=[1,166],$VQ=[1,167],$VR=[1,168],$VS=[1,169],$VT=[1,170],$VU=[1,171],$VV=[1,172],$VW=[1,173],$VX=[1,174],$VY=[9,40,43,47,52,56,75,96,100,103,104,105,106,107,108,109,110,111,112,113,114,115],$VZ=[2,124],$V_=[1,178],$V$=[1,176],$V01=[1,177],$V11=[1,190],$V21=[56,75],$V31=[9,40,43,47,52,56,75,96,100,103,104,105,106,107],$V41=[9,40,43,47,52,56,75,96,100,103,107],$V51=[9,40,43,47,52,56,75,96,100,103,104,105,107],$V61=[9,40,43,47,52,56,75,96,100,103,104,105,106,107,108,109,110,111,112,113,115],$V71=[9,40,43,47,52,56,75,96,100,103,104,105,106,107,109,110,111,112,113],$V81=[9,40,43,47,52,56,75,96,100,103,104,105,106,107,111,112,113];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"BLOQUE":7,"DECLARACION":8,";":9,"ASIGNACION":10,"INCREDECRE":11,"PRINT":12,"PARSEO":13,"ARRAY":14,"MATRIZ":15,"ACCESO_ARRAY":16,"ACCESO_MATRIZ":17,"IF":18,"SEGUN":19,"MIENTRAS":20,"PARA":21,"DOWHILE":22,"DOUNTIL":23,"OP_TERNARIO":24,"FUNCION":25,"LLAMADA":26,"TOCHAR":27,"TOLOWER":28,"TOUPPER":29,"TOSTRING":30,"ROUND":31,"LENGTH":32,"TYPEOF":33,"ARRAY_PQ":34,"RUN":35,"TIPOS":36,"LISTAIDS":37,"igual":38,"expresion":39,"punto_c":40,"par_abre":41,"TIPO_VALOR":42,"par_cierra":43,"=":44,"TIPO":45,"cor_abre":46,"cor_cierra":47,"identificador":48,"pr_new":49,"llave_abre":50,"lista_valores":51,"llave_cierra":52,"t_if":53,"(":54,"Expr":55,")":56,"ELSE_ST":57,"t_else":58,"pr_segun":59,"default":60,"dos_puntos":61,"CASOS":62,"pr_while":63,"pr_for":64,"DECLARACION_PARA":65,"ITERADOR":66,"pr_do":67,"pr_until":68,"IMPRIMIR":69,"pr_imprimir":70,"pr_imprimir_ln":71,"PARAMETROS":72,":":73,"pr_void":74,",":75,"pr_int":76,"pr_string":77,"pr_double":78,"pr_char":79,"pr_boolean":80,"PARAMETROS_LLAMADA":81,"pr_minuscula":82,"pr_mayuscula":83,"pr_redondear":84,"pr_longi":85,"pr_tipo":86,"pr_a_cadena":87,"pr_arreglo":88,".":89,"pr_push":90,"Expresion":91,"pr_pop":92,"ID":93,"[":94,"CALLFUNCION_PARAMETROS":95,"]":96,"pr_run":97,"{":98,"}":99,"-":100,"++":101,"--":102,"+":103,"*":104,"/":105,"%":106,"^":107,"<":108,"<=":109,">":110,">=":111,"==":112,"!=":113,"&&":114,"||":115,"!":116,"tip":117,"entero":118,"decimal":119,"cadena":120,"caracter":121,"true":122,"false":123,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:";",11:"INCREDECRE",12:"PRINT",24:"OP_TERNARIO",38:"igual",40:"punto_c",41:"par_abre",42:"TIPO_VALOR",43:"par_cierra",44:"=",45:"TIPO",46:"cor_abre",47:"cor_cierra",48:"identificador",49:"pr_new",50:"llave_abre",51:"lista_valores",52:"llave_cierra",53:"t_if",54:"(",55:"Expr",56:")",58:"t_else",59:"pr_segun",60:"default",61:"dos_puntos",62:"CASOS",63:"pr_while",64:"pr_for",67:"pr_do",68:"pr_until",70:"pr_imprimir",71:"pr_imprimir_ln",73:":",74:"pr_void",75:",",76:"pr_int",77:"pr_string",78:"pr_double",79:"pr_char",80:"pr_boolean",82:"pr_minuscula",83:"pr_mayuscula",84:"pr_redondear",85:"pr_longi",86:"pr_tipo",87:"pr_a_cadena",88:"pr_arreglo",89:".",90:"pr_push",91:"Expresion",92:"pr_pop",93:"ID",94:"[",95:"CALLFUNCION_PARAMETROS",96:"]",97:"pr_run",98:"{",99:"}",100:"-",101:"++",102:"--",103:"+",104:"*",105:"/",106:"%",107:"^",108:"<",109:"<=",110:">",111:">=",112:"==",113:"!=",114:"&&",115:"||",116:"!",118:"entero",119:"decimal",120:"cadena",121:"caracter",122:"true",123:"false"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[8,5],[8,8],[8,3],[10,3],[13,5],[14,11],[14,11],[15,16],[15,13],[16,6],[17,9],[18,6],[57,2],[57,2],[57,0],[19,9],[19,10],[19,7],[20,5],[21,9],[65,1],[65,1],[66,1],[66,1],[22,6],[23,6],[69,4],[69,3],[69,4],[69,3],[25,6],[25,7],[25,6],[25,7],[37,3],[37,1],[72,5],[72,3],[36,1],[36,1],[36,1],[36,1],[36,1],[26,3],[26,4],[81,3],[81,1],[28,4],[29,4],[31,4],[32,4],[33,4],[30,4],[27,5],[34,6],[34,5],[34,5],[34,6],[35,5],[35,5],[7,3],[7,2],[39,2],[39,2],[39,2],[39,2],[39,2],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,2],[39,1],[39,4],[117,3],[117,1],[117,1],[117,1],[117,1],[117,1],[117,1],[117,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  return $$[$0-1];  
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]];            
break;
case 4: case 14: case 16: case 17: case 21:
  this.$ = $$[$0];  
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 15: case 18: case 19: case 20: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31:
  this.$ = $$[$0-1];  
break;
case 32:
  
                                console.log("error sintactico en linea " + (yylineno+1) );
                                //colocar el siguiente codigo en el archivo grammar.js en el= if(!recovering) como penultima instruccion
                                //let s=Singleton.getInstance();
                                //s.add_error(new error("Sintactico", `El caracter ${(this.terminals_[symbol] || symbol)} no se esperaba en esta posicion`, yyloc.last_line, yyloc.last_column+1))                  
                            
break;
case 33:
 this.$ = new Declaracion($$[$0-3], $$[$0-4], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 34:
 this.$ = new Declaracion($$[$0-6], $$[$0-7], $$[$0-4], _$[$0-7].first_line, _$[$0-7].first_column ); 
break;
case 35:
 this.$ = new Declaracion($$[$0-1], $$[$0-2], null , _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 36:
 this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);  
break;
case 37:
 this.$ = new Parseo($$[$0-3], $$[$0-1] ); 
break;
case 38:
 this.$ = new Vector($$[$0-7], $$[$0-10],$$[$0-4] ,$$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column  ); 
break;
case 39:
 this.$ = new Vector($$[$0-7], $$[$0-10], $$[$0-4],$$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column  ); 
break;
case 40:
 this.$ = new Matriz($$[$0-10], $$[$0-15], $$[$0-6],$$[$0-4], $$[$0-2] ); 
break;
case 41:
 this.$ = new Matriz($$[$0-7], $$[$0-12],$$[$0-3] ,$$[$0-1], null ); 
break;
case 42:
 this.$=new Acceso_arr($$[$0-5], $$[$0-3]  , $$[$0], true, _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 43:
 this.$=new Acceso_arr($$[$0-8], $$[$0-6]  , $$[$0-3],$$[$0], true, _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 44:
 this.$ = new Si($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);  
break;
case 45: case 46:
 this.$ = $$[$0];   
break;
case 47:
 this.$ = null; 
break;
case 48:
this.$ = new Segun($$[$0-6], null, false, $$[$0-2], true) ;
break;
case 49:
this.$ = new Segun($$[$0-7], $$[$0-4], true, $$[$0-1], true) ;
break;
case 50:
this.$ = new Segun($$[$0-4], $$[$0-1], true, null, false) ;
break;
case 51:
this.$ = new Mientras($$[$0-2], $$[$01]) ;
break;
case 52:
 this.$=new Para($$[$0-6], $$[$0-4], $$[$0-2] , $$[$0], _$[$0-8].first_line, _$[$0-8].first_column );   
break;
case 53: case 54: case 55: case 56: case 71: case 72: case 73: case 74: case 75:
 this.$=$$[$0]; 
break;
case 57:
  this.$ = new DoWhile($$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column);    
break;
case 58:
  this.$ = new DoUntil($$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column);    
break;
case 59:
 this.$ = new Imprimir($$[$0-1]  , _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 60:
 this.$ = new Imprimir(null, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 61:
 this.$ = new Imprimir_nl($$[$0-1]  , _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 62:
 this.$ = new Imprimir_nl(null, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 63:
 this.$ = new Funcion($$[$0-5], $$[$0], [], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 64:
 this.$ = new Funcion($$[$0-6], $$[$0-1], $$[$0-4], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 65:
 this.$ = new Funcion($$[$0-5], $$[$01], [], "void", _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 66:
 this.$ = new Funcion($$[$0-6], $$[$0], $$[$0-4], "void", _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 67:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];  
break;
case 68:
 this.$ = [$$[$0]];             
break;
case 69:
 $$[$0-4].push($$[$0-2]+","+$$[$0]); this.$ = $$[$0-4];  
break;
case 70:
 this.$ = [$$[$0-2]+","+$$[$0]];             
break;
case 76:
 this.$ = new LLAMADA($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);  
break;
case 77:
 this.$ = new LLAMADA($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);  
break;
case 78:
    $$[$0-2].push($$[$0]);    this.$ = $$[$0-2];   
break;
case 79:
    this.$ = [$$[$0]];                 
break;
case 80:
 this.$ = new To_lower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);  
break;
case 81:
 this.$ = new To_upper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);  
break;
case 82:
 this.$ = new Redondear($$[$0-1],  _$[$0-3].first_line, _$[$0-3].first_column);  
break;
case 83:
 this.$ = new Longitud($$[$0-1],  _$[$0-3].first_line, _$[$0-3].first_column);  
break;
case 84:
 this.$ = new Tipo($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);  
break;
case 85:
 this.$ = new To_string($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);  
break;
case 86:
 this.$ = new To_arr($$[$0-2],  _$[$0-4].first_line, _$[$0-4].first_column);  
break;
case 87:
 this.$=new Arreglo_mod($$[$0-5] , $$[$0-1]  , true ,false, _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 88:
 this.$=new Arreglo_mod($$[$0-4], null, false,true , _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 89:
 this.$=new ArregloAsignacion($$[$0-4], $$[$0-1]  , null, null, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 90:
 this.$=new ArregloAsignacion($$[$0-5], null, $$[$0-3]  , $$[$0]  , _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 91:
 this.$=new Run($$[$0-4], [], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 92:
 this.$ = new RUN($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);  
break;
case 93:
 this.$ = new Instruccion($$[$0-1]         , _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 94:
 this.$ = new Instruccion(new Array(), _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 95:
 this.$ = new Operacion($$[$0], $$[$0], Tipo.NEGACION,        _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 96:
 this.$ = new IncreDecre(Incremento_op.INCREMENTO1, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 97:
 this.$ = new IncreDecre(Incremento_op.INCREMENTO2, $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 98:
 this.$ = new IncreDecre(Incremento_op.DECREMENTO1, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 99:
 this.$ = new IncreDecre(Incremento_op.DECREMENTO2, $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 100:
 this.$ = new Operacion($$[$0-2], $$[$0], Tipo.MAS            , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 101:
 this.$ = new Operacion($$[$0-2], $$[$0], Tipo.MENOS          , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 102:
 this.$ = new Operacion($$[$0-2], $$[$0], Tipo.MULTIPLICACION , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 103:
 this.$ = new Operacion($$[$0-2], $$[$0], Tipo.DIV            , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 104:
 this.$ = new Operacion($$[$0-2], $$[$0], Tipo.MODULO         , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 105:
 this.$ = new Operacion($$[$0-2], $$[$0], Tipo.POT            , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 106:
 this.$ = new Relacional($$[$0-2], $$[$0], Tipo.MENOR          , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 107:
 this.$ = new Relacional($$[$0-2], $$[$0], Tipo.MENORIGUAL     , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 108:
 this.$ = new Relacional($$[$0-2], $$[$0], Tipo.MAYOR          , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 109:
 this.$ = new Relacional($$[$0-2], $$[$0], Tipo.MAYORIGUAL     , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 110:
 this.$ = new Relacinal($$[$0-2], $$[$0], Tipo.IGUAL          , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 111:
 this.$ = new Relacional($$[$0-2], $$[$0], Tipo.DIFERENCIACION , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 112:
 this.$ = new Logica($$[$0-2], $$[$0],Tipo.AND  , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 113:
 this.$ = new Logica($$[$0-2], $$[$0],Tipo.OR   , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 114:
 this.$ = new Logica($$[$0], $$[$0],Tipo.NOT  , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 115:
  this.$ = $$[$0]; 
break;
case 116:
 this.$= new Acceso_arr($$[$0-3],true ,true ,$$[$0-1]  ,_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 117:
  this.$ = $$[$0-1]; 
break;
case 118:
  this.$ = new Variable($$[$0],                   Type.NUMBER , _$[$0].first_line, _$[$0].first_column); 
break;
case 119:
  this.$ = new Variable($$[$0],                   Type.DOUBLE , _$[$0].first_line, _$[$0].first_column); 
break;
case 120:
  this.$ = new Variable($$[$0].replace(/\"/g,""), Type.STRING , _$[$0].first_line, _$[$0].first_column); 
break;
case 121:
  this.$ = new Variable($$[$0].replace(/\'/g,""), Type.CHAR , _$[$0].first_line, _$[$0].first_column); 
break;
case 122:
  this.$ = new Variable(true,                   Type.BOOLEAN, _$[$0].first_line, _$[$0].first_column); 
break;
case 123:
  this.$ = new Variable(false,                   Type.BOOLEAN, _$[$0].first_line, _$[$0].first_column); 
break;
case 124:
  this.$ = new Acceso($$[$0],_$[$0].first_line, _$[$0].first_column);  
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:6,11:$V1,12:$V2,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:30,35:31,36:34,37:35,41:$V4,48:$V5,53:$V6,59:$V7,63:$V8,64:$V9,67:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,93:$Vn,97:$Vo,98:$Vp},{1:[3]},{2:$V0,5:[1,57],6:58,7:4,8:5,10:6,11:$V1,12:$V2,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:30,35:31,36:34,37:35,41:$V4,48:$V5,53:$V6,59:$V7,63:$V8,64:$V9,67:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,93:$Vn,97:$Vo,98:$Vp},o($Vq,[2,3]),o($Vq,[2,4]),{9:[1,59]},{9:[1,60]},{9:[1,61]},{9:[1,62]},{9:[1,63]},{9:[1,64]},{9:[1,65]},{9:[1,66]},{9:[1,67]},o($Vq,[2,14]),{9:[1,68]},o($Vq,[2,16]),o($Vq,[2,17]),{9:[1,69]},{9:[1,70]},{9:[1,71]},o($Vq,[2,21]),{9:[1,72]},{9:[1,73]},{9:[1,74]},{9:[1,75]},{9:[1,76]},{9:[1,77]},{9:[1,78]},{9:[1,79]},{9:[1,80]},{9:[1,81]},{9:[1,82]},{2:$V0,4:83,6:3,7:4,8:5,10:6,11:$V1,12:$V2,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:30,35:31,36:34,37:35,41:$V4,48:$V5,53:$V6,59:$V7,63:$V8,64:$V9,67:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,93:$Vn,97:$Vo,98:$Vp,99:[1,84]},{37:85,46:[1,86],48:$Vr},{44:[1,88],75:$Vs},{45:[1,90]},o([44,75],$Vt,{46:[1,91],54:[1,92],89:[1,93]}),{54:[1,94]},{41:[1,95]},{41:[1,96]},{41:[1,97]},{7:98,98:$Vp},{54:[1,99]},{54:[1,100]},{54:[1,101]},{54:[1,102]},{54:[1,103]},{54:[1,104]},{54:[1,105]},{44:[1,106],94:[1,107]},{48:[1,108]},o($Vu,[2,71]),o($Vu,[2,72]),o($Vu,[2,73]),o($Vu,[2,74]),o($Vu,[2,75]),{1:[2,1]},o($Vq,[2,2]),o($Vq,[2,5]),o($Vq,[2,6]),o($Vq,[2,7]),o($Vq,[2,8]),o($Vq,[2,9]),o($Vq,[2,10]),o($Vq,[2,11]),o($Vq,[2,12]),o($Vq,[2,13]),o($Vq,[2,15]),o($Vq,[2,18]),o($Vq,[2,19]),o($Vq,[2,20]),o($Vq,[2,22]),o($Vq,[2,23]),o($Vq,[2,24]),o($Vq,[2,25]),o($Vq,[2,26]),o($Vq,[2,27]),o($Vq,[2,28]),o($Vq,[2,29]),o($Vq,[2,30]),o($Vq,[2,31]),o($Vq,[2,32]),{2:$V0,6:58,7:4,8:5,10:6,11:$V1,12:$V2,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V3,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:29,34:30,35:31,36:34,37:35,41:$V4,48:$V5,53:$V6,59:$V7,63:$V8,64:$V9,67:$Va,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf,82:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,93:$Vn,97:$Vo,98:$Vp,99:[1,109]},o($Vv,[2,94]),{38:[1,110],40:[1,111],75:$Vs},{47:[1,112]},o($Vw,$Vt),{39:113,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{48:[1,127]},{43:[1,128]},{39:129,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:134,48:[1,133],54:$Vy,56:[1,130],72:131,81:132,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{90:[1,135],92:[1,136]},{55:[1,137]},{39:138,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:139,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{8:141,10:142,36:143,37:35,48:$Vr,65:140,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{63:[1,144],68:[1,145]},{39:146,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:147,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:148,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:149,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:150,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:151,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:152,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{94:[1,153]},{91:[1,154]},{41:[1,155],54:[1,156]},o($Vv,[2,93]),{39:157,41:[1,158],48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},o($VJ,[2,35]),{46:[1,160],48:[1,159]},o([9,40,43],[2,36],{100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX}),{39:175,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},o($VY,$VZ,{94:$V_,101:$V$,102:$V01}),{48:[1,179]},{48:[1,180]},{39:181,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},o($VY,[2,115]),{39:182,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},o($VY,[2,118]),o($VY,[2,119]),o($VY,[2,120]),o($VY,[2,121]),o($VY,[2,122]),o($VY,[2,123]),o($Vw,[2,67]),{39:183,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{47:[1,184],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{9:[2,76],61:[1,185],73:[1,186]},{56:[1,187],75:[1,188]},{56:[1,189],75:$V11},o([56,75,100,103,104,105,106,107,108,109,110,111,112,113,114,115],$VZ,{73:[1,191],94:$V_,101:$V$,102:$V01}),o($V21,[2,79],{100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX}),{54:[1,192]},{54:[1,193]},{56:[1,194]},{43:[1,195],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{43:[1,196],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{40:[1,197]},{40:[2,53]},{40:[2,54]},{37:85,48:$Vr},{41:[1,198]},{41:[1,199]},{56:[1,200],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{56:[1,201],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{56:[1,202],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{56:[1,203],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{56:[1,204],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{56:[1,205],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{56:[1,206],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{95:[1,207]},{96:[1,208]},{43:[1,209]},{39:134,48:$Vx,54:$Vy,81:210,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{40:[1,211],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{42:[1,212]},{38:[1,213]},{47:[1,214]},{39:215,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:216,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:217,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:218,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:219,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:220,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:221,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:222,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:223,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:224,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:225,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:226,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:227,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:228,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},o($V31,[2,95],{108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX}),o($VY,[2,96]),o($VY,[2,98]),{39:229,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},o($VY,[2,97]),o($VY,[2,99]),o($VY,[2,114]),{56:[1,230],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{40:[1,231],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{38:[1,232],46:[1,233]},{36:234,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{74:[1,235]},{61:[1,236],73:[1,237]},{48:[1,238]},{9:[2,77]},{39:239,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{36:240,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{91:[1,241]},{56:[1,242]},{7:243,98:$Vp},{50:[1,244]},{7:245,98:$Vp},{39:246,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:247,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:248,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{40:[1,249]},{9:[2,80]},{9:[2,81]},{9:[2,85]},{9:[2,82]},{9:[2,83]},{9:[2,84]},{96:[1,250]},{44:[1,251]},{40:[1,252]},{56:[1,253],75:$V11},o($VJ,[2,33]),{43:[1,254]},{49:[1,255]},{48:[1,256]},o([9,40,43,47,52,56,75,96,103],[2,100],{100:$VK,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX}),o($V41,[2,101],{104:$VM,105:$VN,106:$VO,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX}),o($V51,[2,102],{106:$VO,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX}),o($V51,[2,103],{106:$VO,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX}),o($V31,[2,104],{108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX}),o($V41,[2,105],{104:$VM,105:$VN,106:$VO,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX}),o($V61,[2,106],{114:$VW}),o($V71,[2,107],{108:$VQ,114:$VW,115:$VX}),o($V71,[2,108],{108:$VQ,114:$VW,115:$VX}),o($V81,[2,109],{108:$VQ,109:$VR,110:$VS,114:$VW,115:$VX}),o([9,40,43,47,52,56,75,96,100,103,104,105,106,107,112],[2,110],{108:$VQ,109:$VR,110:$VS,111:$VT,113:$VV,114:$VW,115:$VX}),o($V81,[2,111],{108:$VQ,109:$VR,110:$VS,114:$VW,115:$VX}),o($VY,[2,112]),o($V61,[2,113],{114:$VW}),{96:[1,257],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},o($VY,[2,117]),{9:[2,37]},{39:258,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:259,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{7:260,98:$Vp},{7:261,98:$Vp},{36:262,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{74:[1,263]},{73:[1,264]},o($V21,[2,78],{100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX}),o($V21,[2,70]),{56:[1,265]},{9:[2,88]},o($Vq,[2,47],{57:266,58:[1,267]}),{60:[1,268],62:[1,269]},o($Vq,[2,51]),{40:[1,270],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{43:[1,271],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{43:[1,272],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{9:[2,86]},{9:[2,89]},{91:[1,273]},{9:[2,91]},{9:[2,92]},{39:274,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{36:275,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{38:[1,276]},o($VY,[2,116]),{9:[2,42],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{47:[1,277],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},o($Vq,[2,63]),o($Vq,[2,65]),{7:278,98:$Vp},{7:279,98:$Vp},{36:280,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{9:[2,87]},o($Vq,[2,44]),{7:281,18:282,53:$V6,98:$Vp},{61:[1,283]},{52:[1,285],60:[1,284]},{10:287,11:[1,288],37:35,48:$Vr,66:286},{9:[2,57]},{9:[2,58]},{9:[2,90]},{40:[1,289],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{46:[1,290],50:[1,291]},{49:[1,292]},{38:[1,293]},o($Vq,[2,64]),o($Vq,[2,66]),o($V21,[2,69]),o($Vq,[2,45]),o($Vq,[2,46]),{7:294,98:$Vp},{61:[1,295]},{9:[2,50]},{43:[1,296]},{43:[2,55]},{43:[2,56]},o($VJ,[2,34]),{39:297,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{51:[1,298]},{36:299,76:$Vb,77:$Vc,78:$Vd,79:$Ve,80:$Vf},{39:300,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{52:[1,301]},{7:302,98:$Vp},{7:303,98:$Vp},{47:[1,304],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{52:[1,305]},{46:[1,306],50:[1,307]},{9:[2,43],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{9:[2,48]},{52:[1,308]},o($Vq,[2,52]),{40:[1,309]},{40:[1,310]},{39:311,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{39:312,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{9:[2,49]},{9:[2,38]},{9:[2,39]},{47:[1,313],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{52:[1,314],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{46:[1,315]},{40:[1,316]},{39:317,48:$Vx,54:$Vy,100:$Vz,101:$VA,102:$VB,116:$VC,117:119,118:$VD,119:$VE,120:$VF,121:$VG,122:$VH,123:$VI},{9:[2,41]},{47:[1,318],100:$VK,103:$VL,104:$VM,105:$VN,106:$VO,107:$VP,108:$VQ,109:$VR,110:$VS,111:$VT,112:$VU,113:$VV,114:$VW,115:$VX},{40:[1,319]},{9:[2,40]}],
defaultActions: {57:[2,1],141:[2,53],142:[2,54],189:[2,77],201:[2,80],202:[2,81],203:[2,85],204:[2,82],205:[2,83],206:[2,84],231:[2,37],242:[2,88],249:[2,86],250:[2,89],252:[2,91],253:[2,92],265:[2,87],271:[2,57],272:[2,58],273:[2,90],285:[2,50],287:[2,55],288:[2,56],301:[2,48],308:[2,49],309:[2,38],310:[2,39],316:[2,41],319:[2,40]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Operacion} = require('./Arithmetic');
    const {Relacional} = require('./Relacional');
    const {Relational_op} = require ('./Simbolo_rel')
    const {Access} = require('../Expression/Access');
    const {Literal} = require('../Expression/Literal');
    const {If} = require('../Instruction/If');
    const {Print} = require('../Instruction/Print');
    const {Statement} = require('../Instruction/Statement');
    const {While} = require('../Instruction/While');
    const {Declaration} = require('../Instruction/Declaration');
    const {Let} = require('../Instruction/let');
    const {Asignacion} = require('../Instruction/Asignacion');
    const {OperadorTernario} = require('../Instruction/OperadorTernario');
    const {DoWhile} = require('../Instruction/Dowhile');
    const {InstFor} = require('../Instruction/InstFor');
    const {Incre} = require('../Instruction/Incre');
    const {InsFuncion} = require('../Instruction/InsFuncion');
    const {Call} = require('../Instruction/Call');
    const {GraficarTablaSimbolos} = require('../Instruction/Gr');
    const {Arreglo} = require('../Instruction/Arreglo');
    const {ArregloAsignacion} = require('../Instruction/ArregloAsignacion');
    const {ExpreArray} = require('../Expression/ExpreArray');
    const {ArithmeticOption} = require('../Expression/ArithmeticOption');
    const {IncreDecre} = require('../Expression/IncreDecre')
    const {IncreDecreOption} = require('../Expression/IncreDecreOption')
    const {Type} = require('../Abstract/Retorno')
    const {Logical} = require('../Expression/Logical')
    const {LogicalOption} = require('../Expression/LogicalOption')
    const {ArregloAcciones} = require('../Instruction/ArregloAcciones')
    
    const { Singleton}=  require("../Singleton/Singleton")
    const { error } =require("../tool/error")
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 'pr_si'
break;
case 4:return 'pr_contrario'
break;
case 5:return 'pr_elif'
break;
case 6:return 70
break;
case 7:return 71
break;
case 8:return 'pr_switch'
break;
case 9:return 'pr_case'
break;
case 10:return 'pr_break'
break;
case 11:return 63
break;
case 12:return 64
break;
case 13:return 67
break;
case 14:return 68
break;
case 15:return 'pr_retorno'
break;
case 16:return 82
break;
case 17:return 83
break;
case 18:return 84
break;
case 19:return 74
break;
case 20:return 85
break;
case 21:return 86
break;
case 22:return 87
break;
case 23:return 88
break;
case 24:return 90
break;
case 25:return 92
break;
case 26:return 97
break;
case 27:return 76
break;
case 28:return 78
break;
case 29:return 80
break;
case 30:return 79
break;
case 31:return 77
break;
case 32:return 'pr_true'
break;
case 33:return 'pr_false'
break;
case 34:return 49
break;
case 35:return 'salto de linea'
break;
case 36:return 'doble_b'
break;
case 37:return 'com_barra'
break;
case 38:return 'tab'
break;
case 39:return 'simple_barra'
break;
case 40:return 'suma'
break;
case 41:return 'incre'
break;
case 42:return 'resta'
break;
case 43:return 'decre'
break;
case 44:return 'mult'
break;
case 45:return 'div'
break;
case 46:return 'pot'
break;
case 47:return 'mod'
break;
case 48:return 38
break;
case 49:return 'mayor'
break;
case 50:return 'menor'
break;
case 51:return 'mayor_igual'
break;
case 52:return 'menor_igual'
break;
case 53:return 'igual_igual'
break;
case 54:return 'no_igual'
break;
case 55:return 'interrogacion_cierra'
break;
case 56:return 'or'
break;
case 57:return 'and'
break;
case 58:return 'not'
break;
case 59:return 40
break;
case 60:return 61
break;
case 61:return 50
break;
case 62:return 52
break;
case 63:return 41
break;
case 64:return 43
break;
case 65:return 46
break;
case 66:return 47
break;
case 67:return 'O_MAS';
break;
case 68:return 'O_MENOS';
break;
case 69:return 'O_POR';
break;
case 70:return 'O_DIVIDIDO';
break;
case 71: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 120; 
break;
case 72:return 119;
break;
case 73:return 118;
break;
case 74:return 48;
break;
case 75:return 121
break;
case 76:return 5;
break;
case 77: 
      let s= Unica.getInstance()
            s.add_error(new error("Lexico","No se reconoce "+yy_.yytext,yy_.yylineno+1,yy_.yylloc.first_column+1));
    
    console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:return\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:void\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:run\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:")/i,/^(?:\\t)/i,/^(?:\\')/i,/^(?:\+)/i,/^(?:\+\+)/i,/^(?:-)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\?)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:;)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\*=)/i,/^(?:\/=)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:\\'\\\$\\\{[0-9]+\\\}\\'|\{L\})/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}