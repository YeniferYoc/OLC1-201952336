//hola como estan
    int holaMundo;
    /*
    este 
    es un 
    comentario 
    multi 
    lineal
    10 */
    string curso_ = "organización de compiladores 1 2022";
    char var_111 = 'a';
    celular = true;
    int var1, var2, var3 = -125-263;
    var1++;
    var2--;
    boolean flag_1, flag2_, flag33 = true;
    char ch_1, ch_2, ch3, qwert123 = 'M';
    universidad= "usac";
    //20
    boolean flag_personalizada = !(flag_1) && (flag_2) || flag_5;
    Boolean mayoria_edad = false;
    mayoria_edadd = (edad > 21) ? 5+5 : 9*3;
    
    Double doubleInt = (Double) 16; //16.0
    Double doubleString = (Double) "16.0"; //16.0 Cadenas numericas
    Boolean boolInt = (Boolean) 0; //false
    Boolean boolDouble = (Boolean) 1.0; //true
    Boolean boolString = (Boolean) "0"; //false
    Boolean boolChar = (Boolean) '1'; //true 30
    Char charInt = (Char) 16; //'1' solo toma el primer carácter
    Char charDouble = (Char) 16.1; //'1' solo toma el primer carácter
    Int [ ] vector1 = new Int[4]; //se crea un vector de 4 posiciones, con 0 en cada posición
    Char [ ][ ] vectorDosd = new Char [(Int) "4"] [4] ; // se crea un vector de dos dimensiones de 4x4
    //Ejemplo de declaración tipo 2
    String [ ] vector2 = {"hola", "Mundo"}; //vector de 2 posiciones, con "Hola" y "Mundo"
    //Char [ ][ ] vectordosd2 = {{ 0 ,0},{0 , 0}}; // vector de dos dimensiones con valores de 0 en cada posición
    if (x<50){
            Double doubleInt = (Double) 16; //16.0 40
            Double doubleString = (Double) "16.0"; //16.0 Cadenas numericas
            Boolean boolInt = (Boolean) 0; //false
            Boolean boolDouble = (Boolean) 1.0; //true
            Boolean boolString = (Boolean) "0"; //false 
            String [ ] vector2 = {"hola", "Mundo"}; //creamos un vector de 2 posiciones de tipo string
            String valorPosicion = vector2[1]; //posición 1, valorPosicion = “hola”
            Char [ ][ ] vectorDosd = new char [4] [4] ; // creamos vector de 4x4
            Char valor = vectorDosd[1][1];
            valor3 = vectorDosd[1][1]; // 50
            valor3 = vectorDosd[(int) '1'][1];
            valor3 = vectorDosd[1][(int) '1'];

const {exec} = require('node:child_process');
                fs.writeFile("codigo_.dot",dot_, function(err:any){
                    if(err){
                      console.log("no se csreo")
                        return console.log(err);
                    }
                    console.log("se creo el dot jaja")
                    exec("dot -Tpng codigo_.dot -o codigo_.png ");





                });





























                try{
                console.log("entro en el try")
               var file = fs.writeFileSync(join("arbol.dot"), dot_, {flag:"w"});
                var path = join( "arbol.dot")
                console.log(path+" ddd")
                exec("dot -Tpng "+path+" -o arbol.png",(err:any, salida:any)=>{
                  if(err){
                    console.log("no se creo ", err);
                    return 

                  }
                  console.log("salida: |",salida,"|");
                });
                console.log("se creo")

              }catch(err){
                console.log("no se pudo generar")
              }



