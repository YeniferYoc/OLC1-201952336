 
//PRECEDENCIA 
%left '+'
%left '^' '-'
%left '*' '/'
%left '%'
%left UMENOS
%left '=='
%left '!=' '>='
%left '<=' '>'
%left '<' '||'
%left '&&'
%right '!'


%start Init

%%

Init    
    : INSTRUCCIONES EOF  
    |error EOF 
    |error punto_c 
;

INSTRUCCIONES
    : INSTRUCCIONES INSTRUCCION  
    | INSTRUCCION              
;

INSTRUCCION
    : BLOQUE               
    | DECLARACION             
    | CASTEO             
    | ASIGNACION        
    | INCREDECRE       
    | PRINT punto_c 
    | ARRAY          punto_c 
    | MATRIZ          punto_c
    | Asignar_arr          punto_c
    | IF                
    | SEGUN         
    | MIENTRAS            
    | PARA                
    | DOWHILE        
    | DOUNTIL          
    | OP_TERNARIO       punto_c 
    | FUNCION            
    | LLAMADA       punto_c
    | RETORNO       punto_c 
    | ARRAY_PQ      punto_c
    | RUN          punto_c 
    | pr_continue          punto_c
    | pr_break          punto_c
;



OP_TERNARIO
    : par_abre expresion  par_cierra interrogacion_cierra OP_TERNARIO_ST dos_puntos OP_TERNARIO_ST 
;
OP_TERNARIO_ST
    : expresion  
    
;

DECLARACION
    : TIPOS LISTAIDS igual expresion
    |TIPOS LISTAIDS igual  OP_TERNARIO  
    |TIPOS LISTAIDS igual  CASTEO  expresion 
    | TIPOS LISTAIDS  { $$ = new Declaracion
;        
    

ASIGNACION
    : LISTAIDS igual expresion 
    | LISTAIDS igual OP_TERNARIO 
    | LISTAIDS igual CASTEO expresion 
;


CASTEO
    : par_abre TIPOS par_cierra 
;


ARRAY
    : TIPOS cor_abre cor_cierra identificador  igual pr_new TIPOS cor_abre expresion cor_cierra  
    |TIPOS cor_abre cor_cierra identificador  igual  llave_abre PARAMETROS_LLAMADA llave_cierra  
    |TIPOS cor_abre cor_cierra identificador  igual  TOCHAR  
    |TIPOS cor_abre cor_cierra identificador  igual  pr_new TIPOS cor_abre CASTEO expresion cor_cierra  
;  

MATRIZ
    : TIPOS cor_abre cor_cierra cor_abre cor_cierra identificador  igual pr_new TIPOS cor_abre expresion cor_cierra cor_abre expresion cor_cierra  
    |TIPOS cor_abre cor_cierra cor_abre cor_cierra identificador  igual llave_abre Llenar_mat llave_cierra 
    |TIPOS cor_abre cor_cierra cor_abre cor_cierra identificador  igual pr_new TIPOS cor_abre CASTEO expresion cor_cierra cor_abre CASTEO expresion cor_cierra  
    |TIPOS cor_abre cor_cierra cor_abre cor_cierra identificador  igual pr_new TIPOS cor_abre expresion cor_cierra cor_abre CASTEO expresion cor_cierra 
    |TIPOS cor_abre cor_cierra cor_abre cor_cierra identificador  igual pr_new TIPOS cor_abre CASTEO expresion cor_cierra cor_abre expresion cor_cierra  
;  
LLenar_mat 
    : Llenar_mat coma llave_abre PARAMETROS_LLAMADA llave_cierra
    |llave_abre PARAMETROS_LLAMADA llave_cierra 
   ;

Asignar_arr
    : identificador cor_abre expresion cor_cierra  igual expresion 
    
;
Asignar_mat_
    : identificador cor_abre expresion cor_cierra cor_abre expresion cor_cierra  igual expresion  
    
;



IF : 
    pr_si par_abre expresion par_cierra BLOQUE ELSE_ST
;

ELSE_ST
    : pr_contrario BLOQUE
    | pr_contrario IF 
    |                
;
SEGUN
	:pr_segun par_abre expresion par_cierra llave_abre  Cases llave_cierra //{$$ = new Segun($3, $6) ;}
	
;
Cases
    :  Cases  CASE DEFAULT
    | CASE
    |DEFAULT
    ;
CASE:
    pr_case expresion dos_puntos INSTRUCCIONES  pr_break punto_c
;
DEFAULT :
pr_default dos_puntos INSTRUCCIONES pr_break punto_c
;
MIENTRAS	
	:pr_while par_abre expresion par_cierra  BLOQUE 
;	

PARA
    : pr_for par_abre DECLARACION_PARA punto_c expresion punto_c ITERADOR par_cierra BLOQUE 
;

DECLARACION_PARA 
    : DECLARACION       
    | ASIGNACION  
;

ITERADOR
    : ASIGNACION
    | INCREDECRE  
   ;

INCREDECRE
    :   '++' identificador  
    |   identificador  '++' 
    |   identificador  '--'
    |   '--' identificador 
;


DOWHILE
    : pr_do BLOQUE pr_while par_abre expresion par_cierra punto_c
;
DOUNTIL
    : pr_do BLOQUE pr_until par_abre expresion par_cierra punto_c 
;


PRINT 
    : pr_imprimir par_abre expresion par_cierra  
    | pr_imprimir par_abre par_cierra 
    |pr_imprimir_ln par_abre expresion par_cierra 
    | pr_imprimir_ln par_abre      par_cierra  
;


FUNCION
    : identificador par_abre            par_cierra      dos_puntos  TIPOS      BLOQUE 
    | identificador par_abre PARAMETROS par_cierra     dos_puntos TIPOS         BLOQUE  
    | identificador par_abre            par_cierra dos_puntos pr_void BLOQUE 
    | identificador par_abre PARAMETROS par_cierra dos_puntos pr_void BLOQUE 
    | identificador par_abre            par_cierra  BLOQUE
    | identificador par_abre PARAMETROS par_cierra  BLOQUE 
;

RETORNO
    : pr_retorno expresion 
    |pr_retorno

;
LISTAIDS
    : LISTAIDS coma identificador  
    |                identificador 
;
PARAMETROS
    : PARAMETROS coma TIPOS identificador  
    |               TIPOS identificador  
;

TIPOS
    : pr_int
    | pr_string 
    | pr_double 
    | pr_char 
    | pr_boolean 
;

LLAMADA
    : identificador par_abre                        par_cierra 
    | identificador par_abre PARAMETROS_LLAMADA par_cierra 
;

PARAMETROS_LLAMADA 
    : PARAMETROS_LLAMADA coma expresion 
    |                            expresion 
;    

TOLOWER
    : pr_minuscula par_abre       expresion   par_cierra 
   ;
TOUPPER
    : pr_mayuscula par_abre       expresion   par_cierra
   ;

ROUND
    : pr_redondear par_abre       expresion   par_cierra 
   ;
LENGTH
    : pr_longi par_abre       expresion   par_cierra 
   ;
TYPEOF
    : pr_tipo par_abre       expresion   par_cierra
   ;

TOSTRING
    : pr_a_cadena par_abre       expresion   par_cierra 
   ;

TOCHAR
    : pr_arreglo par_abre       expresion   par_cierra 
   ;
ARRAY_PQ
    : identificador punto pr_push par_abre expresion par_cierra                   
    | identificador punto pr_pop  par_abre par_cierra                       
;

RUN
    : pr_run identificador par_abre par_cierra 
    | pr_run identificador par_abre PARAMETROS_LLAMADA par_cierra 
;

BLOQUE
    : llave_abre INSTRUCCIONES  llave_cierra
     | llave_abre              llave_cierra 
;





expresion 
    : '-'  expresion %prec UMENOS        
    | identificador  '++'           
    | '++' identificador            
    | identificador  '--'           
    | '--' identificador            
    | expresion '+'  expresion       
    | expresion '-' expresion
    | expresion '*'  expresion       
    | expresion '/'  expresion
    | expresion '%'  expresion
    | expresion '^' expresion
    | expresion '<'  expresion 
    | expresion '<=' expresion 
    | expresion '>'  expresion 
    | expresion '>=' expresion 
    | expresion '==' expresion 
    | expresion '!=' expresion 
    | expresion '&&' expresion 
    | expresion '||' expresion 
    | '!' expresion    
    | TOCHAR  
    | TOLOWER           
    | TOUPPER           
    | TOSTRING           
    | LLAMADA           
    | ROUND           
    //| OP_TERNARIO        
    | LENGTH           
    | TYPEOF         
    | tip 
    | identificador punto pr_longi          
    | identificador cor_abre CASTEO expresion cor_cierra       
    | identificador cor_abre CASTEO expresion cor_cierra cor_abre CASTEO expresion cor_cierra 
    | identificador cor_abre  expresion cor_cierra cor_abre CASTEO expresion cor_cierra     
    | identificador cor_abre CASTEO expresion cor_cierra cor_abre  expresion cor_cierra           
    | identificador cor_abre  expresion cor_cierra
    | identificador cor_abre  expresion cor_cierra cor_abre  expresion cor_cierra          { 
    
;

tip   
    : par_abre expresion par_cierra  
    |cor_abre expresion cor_cierra
    | entero
    | decimal      
    | cadena     
    | caracter  
    | pr_true         
    | pr_false         
    | identificador          
;
