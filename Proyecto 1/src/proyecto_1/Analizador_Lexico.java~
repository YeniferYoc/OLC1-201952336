/* The following code was generated by JFlex 1.7.0 */

package proyecto_1;
import java_cup.runtime.*;

import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>A_flex.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 13,  4,  6,  7,  5,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9,  0, 10,  0,  0,  0,  0, 12, 42, 43,  8, 39, 41, 40, 17,  3, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0, 44,  0,  0, 45, 47, 
     0, 22, 31, 28, 21, 19, 24, 35, 36, 33, 38,  1, 25, 30, 15, 23, 
    34, 37, 20, 27, 16, 29, 18,  1,  1, 48,  1, 49, 14, 50,  0, 11, 
     0, 22, 31, 28, 21, 19, 24, 35, 36, 33, 38,  1, 25, 30, 15, 23, 
    34, 37, 20, 27, 16, 29, 18,  1,  1, 48,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 46, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\22\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\0\1\21\4\0\1\22\13\0\1\23"+
    "\4\0\1\24\14\0\1\25\1\2\2\26\1\0\1\27"+
    "\1\30\1\22\1\31\10\0\1\32\3\0\1\33\3\0"+
    "\1\34\4\0\1\35\13\0\1\36\12\0\1\37\7\0"+
    "\1\40\11\0\1\41\4\0\1\36\11\0\1\42\5\0"+
    "\1\43\4\0\1\44\1\0\1\45\7\0\1\46\1\47"+
    "\1\50\13\0\1\51\7\0\1\52\4\0\1\53\12\0"+
    "\1\54\1\0\1\55\20\0\1\56\1\0\1\57\1\60"+
    "\1\61\5\0\1\62\4\0\1\63\1\0\1\64\1\65"+
    "\1\66\4\0\1\67\2\0\1\70\5\0\1\71\3\0"+
    "\1\72\10\0\1\73\4\0\1\74\1\75\1\76\1\0"+
    "\1\77\5\0\1\100\1\101\1\0\1\102\1\103\10\0"+
    "\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\63\0\63\0\377"+
    "\0\u0132\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297"+
    "\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f"+
    "\0\u0462\0\63\0\u0495\0\63\0\63\0\63\0\63\0\63"+
    "\0\63\0\63\0\63\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594"+
    "\0\u05c7\0\63\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9"+
    "\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\63\0\u082b\0\u085e"+
    "\0\u0891\0\u08c4\0\63\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3"+
    "\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\63"+
    "\0\u04c8\0\63\0\u0b5b\0\u0b8e\0\63\0\63\0\u05c7\0\63"+
    "\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26"+
    "\0\63\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b"+
    "\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\63\0\u0fbd\0\u0ff0"+
    "\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188"+
    "\0\u11bb\0\63\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed"+
    "\0\u1320\0\u1353\0\u1386\0\u13b9\0\63\0\u13ec\0\u141f\0\u1452"+
    "\0\u1485\0\u14b8\0\u14eb\0\u151e\0\63\0\u1551\0\u1584\0\u15b7"+
    "\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\63\0\u171c"+
    "\0\u174f\0\u1782\0\u17b5\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881"+
    "\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\63\0\u19b3\0\u19e6"+
    "\0\u1a19\0\u1a4c\0\u1a7f\0\63\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b"+
    "\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3"+
    "\0\u1d16\0\u1d49\0\u1d7c\0\63\0\63\0\u1daf\0\u1de2\0\u1e15"+
    "\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad"+
    "\0\63\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\u2112"+
    "\0\63\0\u2145\0\u2178\0\u21ab\0\u21de\0\63\0\u2211\0\u2244"+
    "\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2376\0\u23a9\0\u23dc"+
    "\0\63\0\u240f\0\63\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e"+
    "\0\u2541\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6"+
    "\0\u26d9\0\u270c\0\u273f\0\63\0\u2772\0\63\0\63\0\63"+
    "\0\u27a5\0\u27d8\0\u280b\0\u283e\0\u2871\0\63\0\u28a4\0\u28d7"+
    "\0\u290a\0\u293d\0\63\0\u2970\0\63\0\u29a3\0\63\0\u29d6"+
    "\0\u2a09\0\u2a3c\0\u2a6f\0\63\0\u2aa2\0\u2ad5\0\63\0\u2b08"+
    "\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4\0\63\0\u2c07\0\u2c3a\0\u2c6d"+
    "\0\63\0\u2ca0\0\u2cd3\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f\0\u2dd2"+
    "\0\u2e05\0\63\0\u2e38\0\u2e6b\0\u2e9e\0\u2ed1\0\63\0\63"+
    "\0\63\0\u2f04\0\63\0\u2f37\0\u2f6a\0\u2f9d\0\u2fd0\0\u3003"+
    "\0\63\0\63\0\u3036\0\63\0\u3069\0\u309c\0\u30cf\0\u3102"+
    "\0\u3135\0\u3168\0\u319b\0\u31ce\0\u3201\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\2\5\1\0\1\6\1\7\1\5"+
    "\1\10\1\11\1\12\1\5\1\2\1\13\2\2\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\2\2\23"+
    "\1\24\1\2\1\25\1\26\2\27\1\30\1\2\1\31"+
    "\2\2\1\32\1\33\1\34\1\35\1\36\1\37\1\2"+
    "\1\40\1\41\1\2\1\42\1\43\65\0\1\3\16\0"+
    "\1\44\44\0\1\45\4\0\1\46\56\0\2\5\3\0"+
    "\1\5\3\0\1\5\45\0\12\47\1\0\50\47\1\0"+
    "\1\50\15\0\2\50\1\0\10\50\1\0\5\50\1\0"+
    "\6\50\11\0\1\50\2\0\4\51\1\0\5\51\1\0"+
    "\1\51\1\52\1\0\1\53\44\51\27\0\1\54\5\0"+
    "\1\55\50\0\1\56\56\0\1\57\12\0\2\60\12\0"+
    "\1\61\37\0\1\62\62\0\1\63\56\0\1\64\56\0"+
    "\1\65\10\0\1\66\64\0\1\67\6\0\1\70\2\0"+
    "\2\71\44\0\1\72\14\0\2\73\47\0\1\74\1\75"+
    "\56\0\1\76\2\0\1\77\1\100\10\0\2\101\50\0"+
    "\1\102\52\0\1\103\16\0\1\104\52\0\1\105\1\106"+
    "\61\0\1\107\111\0\1\110\7\0\1\111\60\0\4\45"+
    "\1\112\1\113\2\0\53\45\10\46\1\114\52\46\12\47"+
    "\1\115\50\47\1\0\2\50\10\0\1\116\3\0\2\50"+
    "\1\0\10\50\1\0\5\50\1\0\6\50\11\0\1\50"+
    "\16\0\1\52\60\0\1\51\1\0\1\117\2\0\2\51"+
    "\62\0\1\120\100\0\1\121\50\0\1\122\56\0\1\123"+
    "\55\0\1\124\72\0\1\125\57\0\1\126\21\0\1\127"+
    "\33\0\1\130\74\0\1\131\67\0\2\132\60\0\1\133"+
    "\50\0\1\134\62\0\1\135\106\0\1\136\43\0\1\137"+
    "\1\140\54\0\1\141\16\0\1\142\43\0\1\143\1\144"+
    "\122\0\1\145\27\0\1\146\60\0\1\147\66\0\1\150"+
    "\67\0\1\151\3\0\2\152\1\0\1\153\61\0\1\154"+
    "\44\0\1\155\56\0\1\156\74\0\2\157\1\160\32\0"+
    "\1\112\56\0\3\161\1\162\4\161\1\163\52\161\23\0"+
    "\1\164\64\0\1\165\64\0\1\166\60\0\1\167\12\0"+
    "\2\170\55\0\1\171\55\0\1\172\56\0\1\173\70\0"+
    "\1\174\71\0\2\175\53\0\2\176\63\0\1\177\41\0"+
    "\1\200\104\0\1\201\53\0\1\202\57\0\1\203\52\0"+
    "\1\204\76\0\1\205\62\0\1\206\62\0\1\207\62\0"+
    "\1\210\52\0\1\211\74\0\1\212\55\0\1\213\72\0"+
    "\1\214\52\0\1\215\62\0\1\216\64\0\1\217\57\0"+
    "\1\220\57\0\1\221\65\0\1\222\37\0\3\46\1\223"+
    "\4\46\1\114\55\46\1\224\4\46\1\114\52\46\24\0"+
    "\1\225\64\0\1\226\53\0\1\227\103\0\2\230\64\0"+
    "\1\231\54\0\1\232\51\0\1\233\56\0\1\234\71\0"+
    "\1\235\62\0\1\236\73\0\2\237\51\0\1\240\1\0"+
    "\2\241\2\0\1\242\3\0\1\243\37\0\1\244\77\0"+
    "\1\245\45\0\1\246\65\0\1\247\17\0\1\250\44\0"+
    "\1\251\63\0\1\252\61\0\1\253\56\0\1\254\65\0"+
    "\1\255\62\0\1\256\77\0\2\257\44\0\1\260\77\0"+
    "\2\261\40\0\1\262\71\0\1\263\60\0\1\264\41\0"+
    "\1\161\106\0\1\265\60\0\1\266\71\0\1\267\56\0"+
    "\1\270\67\0\1\271\45\0\1\272\61\0\1\273\103\0"+
    "\2\274\34\0\1\275\76\0\1\276\70\0\1\277\50\0"+
    "\1\300\14\0\2\301\44\0\1\302\14\0\2\303\47\0"+
    "\1\304\54\0\1\305\70\0\1\265\62\0\1\306\62\0"+
    "\1\307\47\0\1\310\76\0\1\311\46\0\1\312\73\0"+
    "\1\313\64\0\1\314\72\0\1\315\53\0\1\316\65\0"+
    "\2\317\65\0\1\320\60\0\1\321\41\0\1\322\72\0"+
    "\1\323\62\0\1\324\62\0\1\325\65\0\1\326\62\0"+
    "\1\327\62\0\1\330\60\0\1\331\72\0\1\332\45\0"+
    "\1\333\62\0\1\334\106\0\1\335\37\0\1\336\65\0"+
    "\1\337\63\0\1\340\61\0\1\341\70\0\1\342\55\0"+
    "\1\343\65\0\1\344\62\0\1\345\61\0\1\346\53\0"+
    "\1\265\66\0\1\347\65\0\1\350\74\0\2\351\61\0"+
    "\2\352\66\0\1\353\41\0\1\176\70\0\2\354\53\0"+
    "\1\355\67\0\1\356\55\0\1\357\62\0\1\360\65\0"+
    "\1\361\67\0\1\362\63\0\1\363\54\0\1\364\52\0"+
    "\1\365\71\0\1\366\60\0\1\265\65\0\1\367\61\0"+
    "\1\370\47\0\1\371\62\0\1\372\101\0\2\373\46\0"+
    "\1\374\67\0\1\375\62\0\1\376\64\0\1\377\71\0"+
    "\1\u0100\50\0\1\u0101\56\0\1\u0102\103\0\2\u0103\40\0"+
    "\1\u0104\70\0\1\u0105\55\0\1\u0106\66\0\1\u0107\74\0"+
    "\1\u0108\64\0\2\u0109\61\0\2\u010a\41\0\1\u010b\55\0"+
    "\1\u010c\72\0\1\u010d\56\0\1\u010e\63\0\1\u010f\71\0"+
    "\1\u0110\62\0\1\u0111\57\0\1\u0112\61\0\1\u0113\102\0"+
    "\1\u0114\62\0\1\u0115\45\0\1\u0116\53\0\1\u0117\63\0"+
    "\1\u0118\66\0\1\u0119\55\0\1\u011a\71\0\1\u011b\54\0"+
    "\1\u011c\77\0\1\u011d\62\0\1\u011e\56\0\1\u011f\62\0"+
    "\1\u0120\54\0\1\u0121\65\0\1\u0122\66\0\2\u0123\53\0"+
    "\1\u0124\64\0\1\u0125\62\0\1\u0126\60\0\1\u0127\65\0"+
    "\1\u0128\64\0\1\u0129\62\0\1\u012a\71\0\2\u012b\53\0"+
    "\2\u012c\56\0\1\u012d\46\0\1\u012e\72\0\1\u012f\56\0"+
    "\1\u0130\63\0\1\u0131\71\0\1\u0132\52\0\1\u0133\77\0"+
    "\1\u0134\51\0\1\u0135\71\0\2\u0136\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12852];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\22\1\1\11\1\1\10\11"+
    "\1\0\1\1\4\0\1\11\13\0\1\11\4\0\1\11"+
    "\14\0\1\11\1\1\1\11\1\1\1\0\2\11\1\1"+
    "\1\11\10\0\1\11\3\0\1\1\3\0\1\1\4\0"+
    "\1\11\13\0\1\11\12\0\1\11\7\0\1\11\11\0"+
    "\1\11\4\0\1\1\11\0\1\11\5\0\1\11\4\0"+
    "\1\1\1\0\1\1\7\0\1\1\2\11\13\0\1\11"+
    "\7\0\1\11\4\0\1\11\12\0\1\11\1\0\1\11"+
    "\20\0\1\11\1\0\3\11\5\0\1\11\4\0\1\11"+
    "\1\0\1\11\1\1\1\11\4\0\1\11\2\0\1\11"+
    "\5\0\1\11\3\0\1\11\10\0\1\11\4\0\3\11"+
    "\1\0\1\11\5\0\2\11\1\0\1\11\1\1\10\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public LinkedList<Mi_error> errores = new LinkedList<>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico : "+yytext()+"Linea"+(yyline+1)+" Columna "+yycolumn);
errores.add(new Mi_error((String)yytext(), yycolumn, yyline)); 
 //for(int i = 0; i<errores.size(); i++){
 //System.out.println(errores.get(i).lexema+" fila "+errores.get(i).fila +" Columna "+errores.get(i).columna);
 
// }
            } 
            // fall through
          case 69: break;
          case 2: 
            { System.out.println("Reconocio token:<numero> lexema:"+yytext());
                    return new Symbol(Simbolos.numero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 70: break;
          case 3: 
            { System.out.println("Reconocio token:<s_div> lexema:"+yytext());
                    return new Symbol(Simbolos.s_div, yycolumn, yyline, yytext());
            } 
            // fall through
          case 71: break;
          case 4: 
            { /*Ignore*/
            } 
            // fall through
          case 72: break;
          case 5: 
            { /*este es un comentario en java, omitirlos*/
            } 
            // fall through
          case 73: break;
          case 6: 
            { System.out.println("Reconocio token:<s_mult> lexema:"+yytext());
                    return new Symbol(Simbolos.s_mult, yycolumn, yyline, yytext());
            } 
            // fall through
          case 74: break;
          case 7: 
            { System.out.println("Reconocio token:<s_suma> lexema:"+yytext());            
                    return new Symbol(Simbolos.s_suma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 8: 
            { System.out.println("Reconocio token:<s_resta> lexema:"+yytext());
                    return new Symbol(Simbolos.s_resta, yycolumn, yyline, yytext());
            } 
            // fall through
          case 76: break;
          case 9: 
            { System.out.println("Reconocio token:<s_coma> lexema:"+yytext());
                    return new Symbol(Simbolos.s_coma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 10: 
            { System.out.println("Reconocio token:<par_a> lexema:"+yytext());
                    return new Symbol(Simbolos.par_a, yycolumn, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 11: 
            { System.out.println("Reconocio token:<par_c> lexema:"+yytext());
                    return new Symbol(Simbolos.par_c, yycolumn, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 12: 
            { System.out.println("Reconocio token:<s_puntoComa> lexema:"+yytext()+"ddd");
                    return new Symbol(Simbolos.s_puntoComa, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 13: 
            { System.out.println("Reconocio token:<s_interrogacion_a> lexema:"+yytext());
                    return new Symbol(Simbolos.s_interrogacion_a, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 14: 
            { System.out.println("Reconocio token:<s_interrogacion_c> lexema:"+yytext());
                    return new Symbol(Simbolos.s_interrogacion_c, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 15: 
            { System.out.println("Reconocio token:<cor_a> lexema:"+yytext());
                    return new Symbol(Simbolos.cor_a, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 16: 
            { System.out.println("Reconocio token:<cor_c> lexema:"+yytext());
                    return new Symbol(Simbolos.cor_c, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 17: 
            { System.out.println("Reconocio token:<comen_linea> lexema:"+yytext());
                    return new Symbol(Simbolos.comen_linea, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 18: 
            { System.out.println("Reconocio token:<caracter> lexema:"+yytext());
                    return new Symbol(Simbolos.caracter, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 19: 
            { System.out.println("Reconocio token:<or> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_or, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 20: 
            { System.out.println("Reconocio token:<pr_si> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_si, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 21: 
            { System.out.println("Reconocio token:<s_asignacion> lexema:"+yytext());
                    return new Symbol(Simbolos.s_asignacion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 22: 
            { System.out.println("Reconocio token:<comentario> lexema:"+yytext());
                    return new Symbol(Simbolos.comen_m_linea_, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 23: 
            { System.out.println("Reconocio token:<cadena> lexema:"+yytext());
                    return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 24: 
            { System.out.println("Reconocio token:<identificador> lexema:"+yytext());
                    return new Symbol(Simbolos.identificador, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 25: 
            { System.out.println("Reconocio token:<not> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_not, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 26: 
            { System.out.println("Reconocio token:<and> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_and, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 27: 
            { System.out.println("Reconocio token:<pr_fin> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_fin, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 28: 
            { System.out.println("Reconocio token:<pr_con> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_con, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 29: 
            { System.out.println("Reconocio token:<pr_mod> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_mod, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 30: 
            { System.out.println("Reconocio token:<comentario de linea multiple> lexema:"+yytext());
                    return new Symbol(Simbolos.comen_m_linea_a, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 31: 
            { System.out.println("Reconocio token:<pr_o_si> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_o_si, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 32: 
            { System.out.println("Reconocio token:<pr_como> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_como, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 33: 
            { System.out.println("Reconocio token:<pr_para> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_para, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 34: 
            { System.out.println("Reconocio token:<boolean_> lexema:"+yytext());
                    return new Symbol(Simbolos.boolean_, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 35: 
            { System.out.println("Reconocio token:<pr_segun> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_segun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 36: 
            { System.out.println("Reconocio token:<menorque> lexema:"+yytext());
                    return new Symbol(Simbolos.menorque, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 37: 
            { System.out.println("Reconocio token:<mayorque> lexema:"+yytext());
                    return new Symbol(Simbolos.mayorque, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 38: 
            { System.out.println("Reconocio token:<pr_hasta> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_hasta, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 39: 
            { System.out.println("Reconocio token:<pr_hacer> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_hacer, yycolumn, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 40: 
            { System.out.println("Reconocio token:<tipo_dato> lexema:"+yytext());
                    return new Symbol(Simbolos.tipo_dato, yycolumn, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 41: 
            { System.out.println("Reconocio token:<pr_fin_si> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_finsi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 42: 
            { System.out.println("Reconocio token:<pr_metodo> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_metodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 43: 
            { System.out.println("Reconocio token:<pr_inicio> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_inicio, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 44: 
            { System.out.println("Reconocio token:<pr_repetir> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_repetir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 45: 
            { System.out.println("Reconocio token:<pr_funcion> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_funcion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 46: 
            { System.out.println("Reconocio token:<pr_entonces> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_entonces, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 47: 
            { System.out.println("Reconocio token:<igual> lexema:"+yytext());
                    return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 48: 
            { System.out.println("Reconocio token:<pr_ejecutar> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_ejecutar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 49: 
            { System.out.println("Reconocio token:<pr_retornar> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_retornar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 50: 
            { System.out.println("Reconocio token:<pr_fin_para> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_fin_para, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 51: 
            { System.out.println("Reconocio token:<pr_mientras> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_mientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 52: 
            { System.out.println("Reconocio token:<pr_ingresar> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_ingresar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 53: 
            { System.out.println("Reconocio token:<pr_imprimir> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_imprimir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 54: 
            { System.out.println("Reconocio token:<pr_pot> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_pot, yycolumn, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 55: 
            { System.out.println("Reconocio token:<pr_f_segun> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_f_segun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 56: 
            { System.out.println("Reconocio token:<pr_convalor> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_convalor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 57: 
            { System.out.println("Reconocio token:<pr_hastaq> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_hastaq, yycolumn, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 58: 
            { System.out.println("Reconocio token:<pr_f_metodo> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_f_metodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 59: 
            { System.out.println("Reconocio token:<pr_f_funcion> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_f_funcion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 60: 
            { System.out.println("Reconocio token:<pr_incremento> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_incremento, yycolumn, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 61: 
            { System.out.println("Reconocio token:<pr_imprimir_nl> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_imprimir_nl, yycolumn, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 62: 
            { System.out.println("Reconocio token:<diferente> lexema:"+yytext());
                    return new Symbol(Simbolos.diferente, yycolumn, yyline, yytext());
            } 
            // fall through
          case 130: break;
          case 63: 
            { System.out.println("Reconocio token:<pr_f_mientras> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_f_mientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 131: break;
          case 64: 
            { System.out.println("Reconocio token:<menor igual> lexema:"+yytext());
                    return new Symbol(Simbolos.menorigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 132: break;
          case 65: 
            { System.out.println("Reconocio token:<mayor igual> lexema:"+yytext());
                    return new Symbol(Simbolos.mayorigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 133: break;
          case 66: 
            { System.out.println("Reconocio token:<pr_param> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_param, yycolumn, yyline, yytext());
            } 
            // fall through
          case 134: break;
          case 67: 
            { System.out.println("Reconocio token:<pr_contrario> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_contrario, yycolumn, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 68: 
            { System.out.println("Reconocio token:<pr_contra_entonces> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_contra_entonces, yycolumn, yyline, yytext());
            } 
            // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
