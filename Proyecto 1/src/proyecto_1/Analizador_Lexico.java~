/* The following code was generated by JFlex 1.7.0 */

package proyecto_1;
import java_cup.runtime.*;

import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>A_flex.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  4,  6,  7,  5,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9,  0, 10,  0, 12,  0,  0, 11, 43, 44,  8, 40, 42, 41, 16,  3, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0, 45,  0,  0, 46, 48, 
     0, 21, 32, 27, 20, 18, 23, 36, 37, 34, 39,  1, 24, 30, 28, 22, 
    35, 38, 19, 26, 31, 29, 17,  1,  1, 49,  1, 50,  0, 51,  0, 15, 
     0, 21, 32, 27, 20, 18, 23, 36, 37, 34, 39,  1, 24, 30, 28, 22, 
    35, 38, 19, 26, 31, 29, 17,  1,  1, 49,  1, 13,  0, 14,  0,  0, 
     0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 47, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\22\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\0\1\21\15\0\1\22\4\0\1\23"+
    "\16\0\1\24\1\2\2\25\1\0\1\26\1\27\1\0"+
    "\1\30\7\0\1\31\3\0\1\32\3\0\1\33\1\0"+
    "\1\34\4\0\1\35\13\0\1\36\12\0\1\37\7\0"+
    "\1\40\12\0\1\41\4\0\1\36\10\0\1\42\5\0"+
    "\1\43\5\0\1\44\1\0\1\45\7\0\1\46\1\47"+
    "\13\0\1\50\4\0\1\51\3\0\1\52\4\0\1\53"+
    "\12\0\1\54\1\0\1\55\21\0\1\56\1\57\1\60"+
    "\1\61\5\0\1\62\4\0\1\63\1\0\1\64\1\65"+
    "\1\66\4\0\1\67\2\0\1\70\5\0\1\71\3\0"+
    "\1\72\10\0\1\73\4\0\1\74\1\75\1\76\1\0"+
    "\1\77\5\0\1\100\1\101\1\0\1\102\1\103\10\0"+
    "\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\64\0\64\0\u0104"+
    "\0\u0138\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4"+
    "\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444"+
    "\0\u0478\0\64\0\u04ac\0\64\0\64\0\64\0\64\0\64"+
    "\0\64\0\64\0\64\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0"+
    "\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750"+
    "\0\u0784\0\u07b8\0\64\0\u07ec\0\u0820\0\u0854\0\u0888\0\64"+
    "\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28"+
    "\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\64\0\u04e0"+
    "\0\64\0\u0b94\0\u0bc8\0\64\0\64\0\u0bfc\0\64\0\u0c30"+
    "\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\64\0\u0d9c"+
    "\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c"+
    "\0\64\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\64\0\u1040\0\u1074"+
    "\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214"+
    "\0\u1248\0\64\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380"+
    "\0\u13b4\0\u13e8\0\u141c\0\u1450\0\64\0\u1484\0\u14b8\0\u14ec"+
    "\0\u1520\0\u1554\0\u1588\0\u15bc\0\64\0\u15f0\0\u1624\0\u1658"+
    "\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790\0\u17c4\0\64"+
    "\0\u17f8\0\u182c\0\u1860\0\u1894\0\u1894\0\u18c8\0\u18fc\0\u1930"+
    "\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\64\0\u1a68\0\u1a9c"+
    "\0\u1ad0\0\u1b04\0\u1b38\0\64\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08"+
    "\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8"+
    "\0\u1ddc\0\u1e10\0\u1e44\0\u1e78\0\64\0\u1eac\0\u1ee0\0\u1f14"+
    "\0\u1f48\0\u1f7c\0\u1fb0\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4"+
    "\0\64\0\u20e8\0\u211c\0\u2150\0\u2184\0\64\0\u21b8\0\u21ec"+
    "\0\u2220\0\64\0\u2254\0\u2288\0\u22bc\0\u22f0\0\64\0\u2324"+
    "\0\u2358\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4"+
    "\0\u24f8\0\64\0\u252c\0\64\0\u2560\0\u2594\0\u25c8\0\u25fc"+
    "\0\u2630\0\u2664\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c"+
    "\0\u27d0\0\u2804\0\u2838\0\u286c\0\u28a0\0\64\0\64\0\64"+
    "\0\64\0\u28d4\0\u2908\0\u293c\0\u2970\0\u29a4\0\64\0\u29d8"+
    "\0\u2a0c\0\u2a40\0\u2a74\0\64\0\u2aa8\0\64\0\u2adc\0\64"+
    "\0\u2b10\0\u2b44\0\u2b78\0\u2bac\0\64\0\u2be0\0\u2c14\0\64"+
    "\0\u2c48\0\u2c7c\0\u2cb0\0\u2ce4\0\u2d18\0\64\0\u2d4c\0\u2d80"+
    "\0\u2db4\0\64\0\u2de8\0\u2e1c\0\u2e50\0\u2e84\0\u2eb8\0\u2eec"+
    "\0\u2f20\0\u2f54\0\64\0\u2f88\0\u2fbc\0\u2ff0\0\u3024\0\64"+
    "\0\64\0\64\0\u3058\0\64\0\u308c\0\u30c0\0\u30f4\0\u3128"+
    "\0\u315c\0\64\0\64\0\u3190\0\64\0\u31c4\0\u31f8\0\u322c"+
    "\0\u3260\0\u3294\0\u32c8\0\u32fc\0\u3330\0\u3364\0\64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\2\5\1\0\1\6\1\7\1\5"+
    "\1\10\1\11\3\2\1\12\1\2\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\2\2\22\1\23\1\24"+
    "\1\2\1\25\1\2\1\26\2\27\1\30\1\2\1\31"+
    "\2\2\1\32\1\33\1\34\1\35\1\36\1\37\1\2"+
    "\1\40\1\41\1\2\1\42\1\43\66\0\1\3\15\0"+
    "\1\44\46\0\1\45\4\0\1\46\57\0\2\5\3\0"+
    "\1\5\52\0\12\47\1\0\51\47\1\0\1\50\12\0"+
    "\1\51\4\0\10\50\1\0\7\50\1\0\6\50\11\0"+
    "\1\50\3\0\1\52\17\0\10\52\1\0\7\52\1\0"+
    "\6\52\11\0\1\52\24\0\1\53\72\0\2\54\1\0"+
    "\1\55\12\0\1\56\36\0\1\57\63\0\1\60\75\0"+
    "\1\61\46\0\1\62\3\0\1\63\65\0\1\64\7\0"+
    "\1\65\3\0\2\66\43\0\1\67\16\0\2\70\46\0"+
    "\1\71\1\72\63\0\1\73\6\0\1\74\50\0\1\75"+
    "\2\0\1\76\1\77\12\0\2\100\47\0\1\101\71\0"+
    "\1\102\1\0\1\103\52\0\1\104\1\105\62\0\1\106"+
    "\114\0\1\107\7\0\1\110\61\0\4\45\1\111\1\112"+
    "\2\0\54\45\10\46\1\113\53\46\12\47\1\114\51\47"+
    "\13\0\1\115\65\0\1\116\47\0\2\52\14\0\1\117"+
    "\1\0\10\52\1\0\7\52\1\0\6\52\11\0\1\52"+
    "\25\0\1\120\57\0\1\121\103\0\1\122\46\0\1\123"+
    "\100\0\1\124\3\0\1\125\37\0\1\126\70\0\1\127"+
    "\70\0\2\130\61\0\1\131\67\0\1\132\63\0\1\133"+
    "\73\0\1\134\42\0\1\135\1\136\73\0\1\137\1\0"+
    "\1\140\64\0\1\141\62\0\1\142\61\0\1\143\2\0"+
    "\1\144\105\0\1\145\26\0\1\146\61\0\1\147\67\0"+
    "\1\150\70\0\1\151\5\0\2\152\1\0\1\153\62\0"+
    "\1\154\43\0\1\155\77\0\1\156\55\0\2\157\1\160"+
    "\34\0\1\111\57\0\3\161\1\162\4\161\1\163\53\161"+
    "\2\0\1\164\105\0\1\165\63\0\1\166\14\0\2\167"+
    "\47\0\1\170\70\0\1\171\56\0\1\172\57\0\1\173"+
    "\71\0\1\174\74\0\2\175\52\0\2\176\64\0\1\177"+
    "\47\0\1\200\101\0\1\201\53\0\1\202\60\0\1\203"+
    "\60\0\1\204\72\0\1\205\57\0\1\206\67\0\1\207"+
    "\63\0\1\210\63\0\1\211\71\0\1\212\57\0\1\213"+
    "\56\0\1\214\73\0\1\215\53\0\1\216\63\0\1\217"+
    "\65\0\1\220\60\0\1\221\100\0\1\222\46\0\1\223"+
    "\41\0\3\46\1\224\4\46\1\113\56\46\1\225\4\46"+
    "\1\113\53\46\2\0\1\164\13\0\1\50\72\0\1\226"+
    "\77\0\2\227\65\0\1\230\53\0\1\231\64\0\1\232"+
    "\51\0\1\233\77\0\1\234\52\0\1\235\63\0\1\236"+
    "\76\0\2\237\50\0\1\240\1\0\2\241\3\0\1\242"+
    "\4\0\1\243\54\0\1\244\62\0\1\245\64\0\1\246"+
    "\50\0\1\247\21\0\1\250\43\0\1\251\63\0\1\252"+
    "\64\0\1\253\62\0\1\254\77\0\1\255\46\0\1\256"+
    "\63\0\1\257\102\0\2\260\43\0\1\261\102\0\2\262"+
    "\55\0\1\263\54\0\1\264\61\0\1\265\43\0\1\161"+
    "\104\0\1\266\66\0\1\267\71\0\1\270\61\0\1\271"+
    "\67\0\1\272\60\0\1\273\70\0\2\274\40\0\1\275"+
    "\72\0\1\276\72\0\1\277\50\0\1\300\16\0\2\301"+
    "\43\0\1\302\16\0\2\303\46\0\1\304\75\0\1\305"+
    "\51\0\1\306\63\0\1\307\63\0\1\310\64\0\1\306"+
    "\54\0\1\311\72\0\1\312\54\0\1\313\67\0\1\314"+
    "\65\0\1\315\74\0\1\316\53\0\1\317\66\0\2\320"+
    "\67\0\1\321\60\0\1\322\47\0\1\323\66\0\1\324"+
    "\63\0\1\325\66\0\1\326\60\0\1\327\66\0\1\330"+
    "\63\0\1\331\61\0\1\332\73\0\1\333\64\0\1\334"+
    "\63\0\1\335\73\0\1\336\56\0\1\337\46\0\1\340"+
    "\64\0\1\341\62\0\1\342\71\0\1\343\56\0\1\344"+
    "\66\0\1\345\63\0\1\346\62\0\1\347\72\0\1\306"+
    "\51\0\1\350\66\0\1\351\77\0\2\352\62\0\2\353"+
    "\67\0\1\354\40\0\1\176\63\0\1\355\70\0\1\356"+
    "\64\0\2\357\54\0\1\360\63\0\1\361\66\0\1\362"+
    "\70\0\1\363\65\0\1\364\54\0\1\365\71\0\1\366"+
    "\54\0\1\367\61\0\1\306\66\0\1\370\62\0\1\371"+
    "\55\0\1\372\63\0\1\373\75\0\2\374\65\0\1\375"+
    "\52\0\1\376\63\0\1\377\65\0\1\u0100\73\0\1\u0101"+
    "\50\0\1\u0102\75\0\1\u0103\70\0\2\u0104\55\0\1\u0105"+
    "\53\0\1\u0106\76\0\1\u0107\47\0\1\u0108\76\0\1\u0109"+
    "\66\0\2\u010a\62\0\2\u010b\60\0\1\u010c\43\0\1\u010d"+
    "\66\0\1\u010e\75\0\1\u010f\66\0\1\u0110\52\0\1\u0111"+
    "\63\0\1\u0112\60\0\1\u0113\62\0\1\u0114\105\0\1\u0115"+
    "\63\0\1\u0116\44\0\1\u0117\72\0\1\u0118\66\0\1\u0119"+
    "\47\0\1\u011a\74\0\1\u011b\54\0\1\u011c\75\0\1\u011d"+
    "\61\0\1\u011e\63\0\1\u011f\56\0\1\u0120\63\0\1\u0121"+
    "\55\0\1\u0122\66\0\1\u0123\67\0\2\u0124\54\0\1\u0125"+
    "\65\0\1\u0126\63\0\1\u0127\61\0\1\u0128\66\0\1\u0129"+
    "\65\0\1\u012a\63\0\1\u012b\74\0\2\u012c\52\0\2\u012d"+
    "\57\0\1\u012e\54\0\1\u012f\66\0\1\u0130\75\0\1\u0131"+
    "\66\0\1\u0132\52\0\1\u0133\71\0\1\u0134\62\0\1\u0135"+
    "\52\0\1\u0136\72\0\2\u0137\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13208];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\22\1\1\11\1\1\10\11"+
    "\1\0\1\1\15\0\1\11\4\0\1\11\16\0\1\11"+
    "\1\1\1\11\1\1\1\0\2\11\1\0\1\11\7\0"+
    "\1\11\3\0\1\1\3\0\1\1\1\0\1\11\4\0"+
    "\1\11\13\0\1\11\12\0\1\11\7\0\1\11\12\0"+
    "\1\11\4\0\1\1\10\0\1\11\5\0\1\11\5\0"+
    "\1\1\1\0\1\1\7\0\1\1\1\11\13\0\1\11"+
    "\4\0\1\11\3\0\1\11\4\0\1\11\12\0\1\11"+
    "\1\0\1\11\21\0\4\11\5\0\1\11\4\0\1\11"+
    "\1\0\1\11\1\1\1\11\4\0\1\11\2\0\1\11"+
    "\5\0\1\11\3\0\1\11\10\0\1\11\4\0\3\11"+
    "\1\0\1\11\5\0\2\11\1\0\1\11\1\1\10\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public LinkedList<Mi_error> errores = new LinkedList<>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico : "+yytext()+"Linea"+(yyline+1)+" Columna "+yycolumn);
errores.add(new Mi_error((String)yytext(), yycolumn, yyline)); 
 //for(int i = 0; i<errores.size(); i++){
 //System.out.println(errores.get(i).lexema+" fila "+errores.get(i).fila +" Columna "+errores.get(i).columna);
 
// }
            } 
            // fall through
          case 69: break;
          case 2: 
            { System.out.println("Reconocio token:<numero> lexema:"+yytext());
                    return new Symbol(Simbolos.numero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 70: break;
          case 3: 
            { System.out.println("Reconocio token:<s_div> lexema:"+yytext());
                    return new Symbol(Simbolos.s_div, yycolumn, yyline, yytext());
            } 
            // fall through
          case 71: break;
          case 4: 
            { /*Ignore*/
            } 
            // fall through
          case 72: break;
          case 5: 
            { /*este es un comentario en java, omitirlos*/
            } 
            // fall through
          case 73: break;
          case 6: 
            { System.out.println("Reconocio token:<s_mult> lexema:"+yytext());
                    return new Symbol(Simbolos.s_mult, yycolumn, yyline, yytext());
            } 
            // fall through
          case 74: break;
          case 7: 
            { System.out.println("Reconocio token:<s_suma> lexema:"+yytext());            
                    return new Symbol(Simbolos.s_suma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 8: 
            { System.out.println("Reconocio token:<s_resta> lexema:"+yytext());
                    return new Symbol(Simbolos.s_resta, yycolumn, yyline, yytext());
            } 
            // fall through
          case 76: break;
          case 9: 
            { System.out.println("Reconocio token:<s_coma> lexema:"+yytext());
                    return new Symbol(Simbolos.s_coma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 10: 
            { System.out.println("Reconocio token:<par_a> lexema:"+yytext());
                    return new Symbol(Simbolos.par_a, yycolumn, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 11: 
            { System.out.println("Reconocio token:<par_c> lexema:"+yytext());
                    return new Symbol(Simbolos.par_c, yycolumn, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 12: 
            { System.out.println("Reconocio token:<s_puntoComa> lexema:"+yytext()+"ddd");
                    return new Symbol(Simbolos.s_puntoComa, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 13: 
            { System.out.println("Reconocio token:<s_interrogacion_a> lexema:"+yytext());
                    return new Symbol(Simbolos.s_interrogacion_a, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 14: 
            { System.out.println("Reconocio token:<s_interrogacion_c> lexema:"+yytext());
                    return new Symbol(Simbolos.s_interrogacion_c, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 15: 
            { System.out.println("Reconocio token:<cor_a> lexema:"+yytext());
                    return new Symbol(Simbolos.cor_a, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 16: 
            { System.out.println("Reconocio token:<cor_c> lexema:"+yytext());
                    return new Symbol(Simbolos.cor_c, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 17: 
            { System.out.println("Reconocio token:<comen_linea> lexema:"+yytext());
                    return new Symbol(Simbolos.comen_linea, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 18: 
            { System.out.println("Reconocio token:<or> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_or, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 19: 
            { System.out.println("Reconocio token:<pr_si> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_si, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 20: 
            { System.out.println("Reconocio token:<s_asignacion> lexema:"+yytext());
                    return new Symbol(Simbolos.s_asignacion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 21: 
            { System.out.println("Reconocio token:<comentario> lexema:"+yytext());
                    return new Symbol(Simbolos.comen_m_linea_, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 22: 
            { System.out.println("Reconocio token:<cadena> lexema:"+yytext());
                    return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 23: 
            { System.out.println("Reconocio token:<caracter> lexema:"+yytext());
                    return new Symbol(Simbolos.caracter, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 24: 
            { System.out.println("Reconocio token:<identificador> lexema:"+yytext());
                    return new Symbol(Simbolos.identificador, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 25: 
            { System.out.println("Reconocio token:<and> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_and, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 26: 
            { System.out.println("Reconocio token:<pr_fin> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_fin, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 27: 
            { System.out.println("Reconocio token:<pr_con> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_con, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 28: 
            { System.out.println("Reconocio token:<not> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_not, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 29: 
            { System.out.println("Reconocio token:<pr_mod> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_mod, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 30: 
            { System.out.println("Reconocio token:<comentario de linea multiple> lexema:"+yytext());
                    return new Symbol(Simbolos.comen_m_linea_a, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 31: 
            { System.out.println("Reconocio token:<pr_o_si> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_o_si, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 32: 
            { System.out.println("Reconocio token:<pr_como> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_como, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 33: 
            { System.out.println("Reconocio token:<pr_para> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_para, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 34: 
            { System.out.println("Reconocio token:<boolean_> lexema:"+yytext());
                    return new Symbol(Simbolos.boolean_, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 35: 
            { System.out.println("Reconocio token:<pr_segun> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_segun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 36: 
            { System.out.println("Reconocio token:<menorque> lexema:"+yytext());
                    return new Symbol(Simbolos.menorque, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 37: 
            { System.out.println("Reconocio token:<mayorque> lexema:"+yytext());
                    return new Symbol(Simbolos.mayorque, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 38: 
            { System.out.println("Reconocio token:<pr_hasta> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_hasta, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 39: 
            { System.out.println("Reconocio token:<pr_hacer> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_hacer, yycolumn, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 40: 
            { System.out.println("Reconocio token:<pr_fin_si> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_finsi, yycolumn, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 41: 
            { System.out.println("Reconocio token:<tipo_dato> lexema:"+yytext());
                    return new Symbol(Simbolos.tipo_dato, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 42: 
            { System.out.println("Reconocio token:<pr_metodo> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_metodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 43: 
            { System.out.println("Reconocio token:<pr_inicio> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_inicio, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 44: 
            { System.out.println("Reconocio token:<pr_repetir> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_repetir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 45: 
            { System.out.println("Reconocio token:<pr_funcion> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_funcion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 46: 
            { System.out.println("Reconocio token:<igual> lexema:"+yytext());
                    return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 47: 
            { System.out.println("Reconocio token:<pr_entonces> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_entonces, yycolumn, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 48: 
            { System.out.println("Reconocio token:<pr_ejecutar> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_ejecutar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 49: 
            { System.out.println("Reconocio token:<pr_retornar> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_retornar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 50: 
            { System.out.println("Reconocio token:<pr_fin_para> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_fin_para, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 51: 
            { System.out.println("Reconocio token:<pr_mientras> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_mientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 52: 
            { System.out.println("Reconocio token:<pr_ingresar> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_ingresar, yycolumn, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 53: 
            { System.out.println("Reconocio token:<pr_imprimir> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_imprimir, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 54: 
            { System.out.println("Reconocio token:<pr_pot> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_pot, yycolumn, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 55: 
            { System.out.println("Reconocio token:<pr_f_segun> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_f_segun, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 56: 
            { System.out.println("Reconocio token:<pr_convalor> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_convalor, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 57: 
            { System.out.println("Reconocio token:<pr_hastaq> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_hastaq, yycolumn, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 58: 
            { System.out.println("Reconocio token:<pr_f_metodo> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_f_metodo, yycolumn, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 59: 
            { System.out.println("Reconocio token:<pr_f_funcion> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_f_funcion, yycolumn, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 60: 
            { System.out.println("Reconocio token:<pr_incremento> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_incremento, yycolumn, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 61: 
            { System.out.println("Reconocio token:<pr_imprimir_nl> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_imprimir_nl, yycolumn, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 62: 
            { System.out.println("Reconocio token:<diferente> lexema:"+yytext());
                    return new Symbol(Simbolos.diferente, yycolumn, yyline, yytext());
            } 
            // fall through
          case 130: break;
          case 63: 
            { System.out.println("Reconocio token:<pr_f_mientras> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_f_mientras, yycolumn, yyline, yytext());
            } 
            // fall through
          case 131: break;
          case 64: 
            { System.out.println("Reconocio token:<menor igual> lexema:"+yytext());
                    return new Symbol(Simbolos.menorigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 132: break;
          case 65: 
            { System.out.println("Reconocio token:<mayor igual> lexema:"+yytext());
                    return new Symbol(Simbolos.mayorigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 133: break;
          case 66: 
            { System.out.println("Reconocio token:<pr_param> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_param, yycolumn, yyline, yytext());
            } 
            // fall through
          case 134: break;
          case 67: 
            { System.out.println("Reconocio token:<pr_contrario> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_contrario, yycolumn, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 68: 
            { System.out.println("Reconocio token:<pr_contra_entonces> lexema:"+yytext());
                    return new Symbol(Simbolos.pr_contra_entonces, yycolumn, yyline, yytext());
            } 
            // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
